<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FileCabinetApp</name>
    </assembly>
    <members>
        <member name="M:FileCabinetApp.FIleCabinetCsvWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Create <see cref="T:FileCabinetApp.FIleCabinetCsvWriter"/> object by source <see cref="T:System.IO.TextWriter"/> stream
            </summary>
            <param name="file">Source stream</param>
        </member>
        <member name="M:FileCabinetApp.FIleCabinetCsvWriter.Write(FileCabinetApp.FileCabinetRecord)">
            <summary>
            Serialize source record to current <see cref="T:System.IO.TextWriter"/>
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetServiceSnapshot.SaveToCsv(System.IO.StreamWriter)">
            <summary>
            Create csv file to source <see cref="T:System.IO.StreamWriter"/> file
            </summary>
            <param name="file">Source file</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetServiceSnapshot.SaveToXml(System.IO.StreamWriter)">
            <summary>
            Create xml file to source <see cref="T:System.IO.StreamWriter"/> file
            </summary>
            <param name="file">Source file</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetXmlWriter.Write(FileCabinetApp.FileCabinetRecord)">
            <summary>
            Serialize record to xml format
            </summary>
            <param name="record">Source record</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.CreateRecord(FileCabinetApp.Parameter)">
            <summary>
            The method create new record from input data and return its id
            </summary>
            <returns>An id of current record</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.ReadParameters(System.Int32)">
            <summary>
            Read parameters from keyboard and parse it to <see cref="T:FileCabinetApp.Parameter"/> object
            </summary>
            <param name="id">Source id of read parameter</param>
            <returns><see cref="T:FileCabinetApp.Parameter"/> object equivalent for read parameters</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.ReadInput``1(System.Func{System.String,FileCabinetApp.ConversionResult{``0}},System.Func{``0,FileCabinetApp.ValidationResult})">
            <summary>
            Read data from keyboard, convert it by source converter and validate with source validator
            </summary>
            <typeparam name="T">Type of read data</typeparam>
            <param name="converter">Source converter</param>
            <param name="validator">Source validator</param>
            <returns>Correct input object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.PrintRecords">
            <summary>
            Prints <see cref="T:FileCabinetApp.FileCabinetRecord"/> array
            </summary>
        </member>
        <member name="P:FileCabinetApp.FileCabinetMemoryService.Stat">
            <summary>
            Returns number of records that the service stores
            </summary>
            <value>An ordinal number of the last record</value>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.EditRecord(FileCabinetApp.Parameter)">
            <summary>
            Edit record with the source one
            </summary>
            <param name="parameters">Parameter contains new data</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.AppendToAllDictionaries(FileCabinetApp.FileCabinetRecord)">
            <summary>
            Append record to all dictionaries
            </summary>
            <param name="record">Source record</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.AppendToFirstNameDictionary(FileCabinetApp.FileCabinetRecord)">
            <summary>
            Append record to FirstNameDictionary
            </summary>
            <param name="record">Source record</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.AppendToLastNameDictionary(FileCabinetApp.FileCabinetRecord)">
            <summary>
            Append record to LastNameDictionary
            </summary>
            <param name="record">Source record</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.AppendToDateOfBirthDictionary(FileCabinetApp.FileCabinetRecord)">
            <summary>
            Append record to DateOfBirthDictionary
            </summary>
            <param name="record">Source record</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.RemoveFromAllDictionaries(FileCabinetApp.FileCabinetRecord)">
            <summary>
            Remove record from all dictionaries
            </summary>
            <param name="record">Source record to remove</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.Find(System.String,FileCabinetApp.FindCriteria)">
            <summary>
            Create an array with all occurrences of searchValue with appropriate criteria
            </summary>
            <param name="searchValue">value to search</param>
            <param name="criteria">Criteria to search (first name, </param>
            <returns></returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.MakeSnapshot">
            <summary>
            Create <see cref="T:FileCabinetApp.FileCabinetServiceSnapshot"/> object with current record array
            </summary>
            <returns><see cref="T:FileCabinetApp.FileCabinetServiceSnapshot"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.InputConverter.NameConverter(System.String)">
            <summary>
            Convert source string to its string representation
            </summary>
            <param name="source">Source name either first or last</param>
            <returns>Parsed <see cref="T:System.String"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.InputConverter.DateOfBirthConverter(System.String)">
            <summary>
            Converts source date of birth representation into it`s <see cref="T:System.DateTime"/> equivalent 
            </summary>
            <param name="dateOfBirth">Source date of birth</param>
            <returns>Parsed <see cref="T:System.DateTime"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.InputConverter.JobExperienceConverter(System.String)">
            <summary>
            Converts source job experience representation into it`s <see cref="T:System.Int16"/> equivalent 
            </summary>
            <param name="jobExperience">Source job experience</param>
            <returns>Parsed <see cref="T:System.Int16"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.InputConverter.WageConverter(System.String)">
            <summary>
            Converts source wage representation into it`s <see cref="T:System.Decimal"/> equivalent 
            </summary>
            <param name="wage">Source wage</param>
            <returns>Parsed <see cref="T:System.Decimal"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.InputConverter.RankConverter(System.String)">
            <summary>
            Converts source rank representation into it`s <see cref="T:System.Char"/> equivalent
            </summary>
            <param name="rank">Source rank</param>
            <returns>Parsed <see cref="T:System.Char"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.Program.SetValidationRule(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Create <see cref="T:FileCabinetApp.IFileCabinetService"/> object according to entered command parameter
            </summary>
            <param name="args">Source command parameter</param>
            <exception cref="T:System.ArgumentException">Thrown when there is no such command parameter, or it is not exist.</exception>
            <returns></returns>
        </member>
        <member name="M:FileCabinetApp.Program.Stat(System.String)">
            <summary>
            Prints the amount of records
            </summary>
        </member>
        <member name="M:FileCabinetApp.Program.Create(System.String)">
            <summary>
            Create a new record according to data user entered
            </summary>
        </member>
        <member name="M:FileCabinetApp.Program.List(System.String)">
            <summary>
            Return list of records added to service
            </summary>
        </member>
        <member name="M:FileCabinetApp.Program.Edit(System.String)">
            <summary>
            Edit the record with entered id
            </summary>
            <param name="parameters">Id of the record to edit</param>
        </member>
        <member name="M:FileCabinetApp.Program.Find(System.String)">
            <summary>
            Prints all the records with entered attribute equals searchValue
            </summary>
            <param name="parameters">Parameter in format "attribute searchValue"</param>
        </member>
        <member name="M:FileCabinetApp.Program.FindByAttribute(System.String,System.String)">
            <summary>
            Create an array where any attribute element equals searchValue
            </summary>
            <param name="attribute">Search property</param>
            <param name="searchValue">Value to search</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Entered attribute is not exist</exception>
        </member>
        <member name="M:FileCabinetApp.Program.Export(System.String)">
            <summary>
            Serialize all records in file with entered format
            </summary>
            <param name="parameters">Output file format</param>
        </member>
        <member name="M:FileCabinetApp.CustomValidator.NameValidator(System.String)">
            <summary>
            Validate name either first or last
            </summary>
            <param name="name">first or last name</param>
            <exception cref="T:System.ArgumentException">Entered name is null or whitespace or it`s length is less than 2 or greater than 60</exception>
        </member>
        <member name="M:FileCabinetApp.CustomValidator.DateOfBirthValidator(System.DateTime)">
            <summary>
            Validate date of birth in format "dd/MM/yyyy"
            </summary>
            <param name="dateOfBirth">entered date of birth</param>
            <exception cref="T:System.ArgumentNullException">Date of birth is null or whitespace</exception>
            <exception cref="T:System.ArgumentException">Date of birth is not in dd/mm/yyyy format.
            Date of birth is less than 01-Jan-1950 or greater than current date time</exception>
        </member>
        <member name="M:FileCabinetApp.CustomValidator.JobExperienceValidator(System.Int16)">
            <summary>
            Get job experience from keyboard
            </summary>
            <exception cref="T:System.ArgumentException">Job experience is null.
            Job experience is not an integer or less than zero or greater than short.MaxValue.
            Job experience is less than zero or greater than 100.</exception>
        </member>
        <member name="M:FileCabinetApp.CustomValidator.WageValidator(System.Decimal)">
            <summary>
            Get wage from keyboard
            </summary>
            <exception cref="T:System.ArgumentException">Wage is null.
            Wage is not an integer or greater than decimal.MaxValue.
            Wage is less than zero</exception>
        </member>
        <member name="M:FileCabinetApp.CustomValidator.RankValidator(System.Char)">
            <summary>
            Get rank from keyboard
            </summary>
            <exception cref="T:System.ArgumentException">Rank is not in current rank system</exception>
        </member>
        <member name="M:FileCabinetApp.DefaultValidator.NameValidator(System.String)">
            <summary>
            Validate name either first or last
            </summary>
            <param name="name">first or last name</param>
            <exception cref="T:System.ArgumentException">Entered name is null or whitespace or it`s length is less than 2 or greater than 60</exception>
        </member>
        <member name="M:FileCabinetApp.DefaultValidator.DateOfBirthValidator(System.DateTime)">
            <summary>
            Validate date of birth in format "dd/MM/yyyy"
            </summary>
            <param name="dateOfBirth">entered date of birth</param>
            <exception cref="T:System.ArgumentNullException">Date of birth is null or whitespace</exception>
            <exception cref="T:System.ArgumentException">Date of birth is not in dd/mm/yyyy format.
            Date of birth is less than 01-Jan-1950 or greater than current date time</exception>
        </member>
    </members>
</doc>

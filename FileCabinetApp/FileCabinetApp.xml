<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FileCabinetApp</name>
    </assembly>
    <members>
        <member name="M:FileCabinetApp.FIleCabinetCsvWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Create <see cref="T:FileCabinetApp.FIleCabinetCsvWriter"/> object by source <see cref="T:System.IO.TextWriter"/> stream
            </summary>
            <param name="file">Source stream</param>
        </member>
        <member name="M:FileCabinetApp.FIleCabinetCsvWriter.Write(FileCabinetApp.FileCabinetRecord[])">
            <summary>
            Serialize source record to current <see cref="T:System.IO.TextWriter"/>
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetServiceSnapshot.SaveToCsv(System.IO.StreamWriter)">
            <summary>
            Create csv file to source <see cref="T:System.IO.StreamWriter"/> file
            </summary>
            <param name="file">Source file</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetServiceSnapshot.SaveToXml(System.IO.StreamWriter)">
            <summary>
            Create xml file to source <see cref="T:System.IO.StreamWriter"/> file
            </summary>
            <param name="file">Source file</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetServiceSnapshot.CopyAndDelete(System.IO.FileStream,FileCabinetApp.IFileCabinetService)">
            <summary>
            Read all records from source file and delete it 
            </summary>
            <param name="file"></param>2
            <param name="service"></param>
            <returns><see cref="T:FileCabinetApp.FileCabinetServiceSnapshot"/> snapshot created from source file</returns>
            <exception cref="T:System.ArgumentNullException">Source file or service are null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetXmlWriter.Write(FileCabinetApp.FileCabinetRecord[])">
            <summary>
            Serialize record to xml format
            </summary>
            <param name="records">Source record</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetFilesystemService.CreateRecord">
            <summary>
            Create new record in base file from user's input
            </summary>
            <returns>Id of created record</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetFilesystemService.CreateRecord(FileCabinetApp.FileCabinetRecord)">
            <summary>
            Create new record in base file with source parameters
            </summary>
            <param name="record">Source parameters to add</param>
            <returns>Id of created record</returns>
            <exception cref="T:System.ArgumentNullException">Parameters are null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetFilesystemService.Rewrite(FileCabinetApp.FileCabinetRecord)">
            <summary>
            Overwriting existing record by the source
            </summary>
            <param name="record">Source record</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetFilesystemService.EditRecord(FileCabinetApp.FileCabinetRecord)">
            <summary>
            Edit already existing record with source
            </summary>
            <param name="record">Source for editing record</param>
            <exception cref="T:System.ArgumentNullException">Parameters are null</exception>
            <exception cref="T:System.ArgumentException">There is no record suitable for replacement</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetFilesystemService.GetRecords">
            <summary>
            Read all records from base file convert to <see cref="T:FileCabinetApp.FilesystemRecord"/> array
            </summary>
            <returns>Array of <see cref="T:FileCabinetApp.FilesystemRecord"/></returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetFilesystemService.GetStat">
            <summary>
            Get count of records in base file
            </summary>
            <returns>The amount of all records in base file</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetFilesystemService.ReadParameters(System.Int32)">
            <summary>
            Read parameters from keyboard and parse it to <see cref="T:FileCabinetApp.FileCabinetRecord"/> object
            </summary>
            <param name="id">Source id of read parameter</param>
            <returns><see cref="T:FileCabinetApp.FileCabinetServiceSnapshot"/> object equivalent for read parameters</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetFilesystemService.ReadInput``1(System.Func{System.String,FileCabinetApp.ConversionResult{``0}})">
            <summary>
            Read data from keyboard, convert it by source converter and validate with source validator
            </summary>
            <typeparam name="T">Type of read data</typeparam>
            <param name="converter">Source converter</param>
            <returns>Correct input object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetFilesystemService.Find(System.String,FileCabinetApp.SearchValue)">
            <summary>
            Find record with source attribute equals searchValue
            </summary>
            <param name="searchValue">Value to search</param>
            <param name="attribute">Attribute to comparing</param>
            <returns><see cref="T:FileCabinetApp.FileCabinetRecord"/> array of records with suitable value of attribute</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Search value is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetFilesystemService.ExtractValueByAttribute(FileCabinetApp.FileCabinetRecord,FileCabinetApp.SearchValue)">
            <summary>
            Extract suitable parameter from record according to attribute
            </summary>
            <param name="record">Source record</param>
            <param name="attribute">Attribute to get</param>
            <returns>String representation of record's parameter</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Attribute is not exist</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetFilesystemService.FindByFirstName(System.String)">
            <summary>
            Find all occurrences of searchValue in records of current data base file
            </summary>
            <param name="searchValue">Value to search</param>
            <returns><see cref="T:FileCabinetApp.FileCabinetRecord"/> array with firstname equals searchValue</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetFilesystemService.FindByLastName(System.String)">
            <summary>
            Find all occurrences of searchValue in records of current data base file
            </summary>
            <param name="searchValue">Value to search</param>
            <returns><see cref="T:FileCabinetApp.FileCabinetRecord"/> array with lastname equals searchValue</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetFilesystemService.FindByDateOfBirth(System.String)">
            <summary>
            Find all occurrences of searchValue in records of current data base file
            </summary>
            <param name="searchValue">Date of birth in format dd/MM/yyyy</param>
            <returns><see cref="T:FileCabinetApp.FileCabinetRecord"/> array with date of birth equals searchValue</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetFilesystemService.Restore(FileCabinetApp.FileCabinetServiceSnapshot)">
            <summary>
            Update current records with snapshot. If record is exist it will be overwritten, else append to end
            </summary>
            <param name="snapshot">Source snapshot</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetFilesystemService.Remove(System.Int32)">
            <summary>
            Marks the record with input id as deleted
            </summary>
            <param name="id">Source record's id</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetFilesystemService.Purge">
            <summary>
            Delete all records marked as delete from current file by creating a new one 
            </summary>
        </member>
        <member name="M:FileCabinetApp.FileSystemReader.ReadAndMoveCursorBack">
            <summary>
            Read the record and move cursor to it's beginning
            </summary>
            <returns></returns>
        </member>
        <member name="M:FileCabinetApp.FileSystemReader.ReadRecord">
            <summary>
            Read one record from base file consistently
            </summary>
            <returns>Read <see cref="T:FileCabinetApp.FileCabinetRecord"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.FileSystemReader.Deserialize">
            <summary>
            Deserialize all content from source file into <see cref="T:FileCabinetApp.FilesystemRecord"/> array
            </summary>
            <returns><see cref="T:FileCabinetApp.FileCabinetRecord"/> array</returns>
            <exception cref="T:System.ArgumentNullException">stream is null</exception>
            <exception cref="T:System.ArgumentException">The file size does not correspond to the integer number of occurrences of the records</exception>
        </member>
        <member name="M:FileCabinetApp.FilesystemRecord.ToBytes(System.String,System.Int32)">
            <summary>
            Create <see cref="T:System.Byte"/> array from value with source capacity 
            </summary>
            <param name="value">Value to make array with</param>
            <param name="capacity">Source capacity</param>
            <returns> <see cref="T:System.Byte"/> array with length equals capacity </returns>
        </member>
        <member name="M:FileCabinetApp.FilesystemRecord.Serialize(System.IO.FileStream)">
            <summary>
            Serialize current <see cref="T:FileCabinetApp.FilesystemRecord"/> into source file
            </summary>
            <param name="stream">Source file stream</param>
        </member>
        <member name="M:FileCabinetApp.FilesystemRecord.ToFileCabinetRecord">
            <summary>
            Cast current <see cref="T:FileCabinetApp.FilesystemRecord"/> to <see cref="T:FileCabinetApp.FileCabinetRecord"/>
            </summary>
            <returns>Suitable <see cref="T:FileCabinetApp.FileCabinetRecord"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.FilesystemRecord.ToAscii(System.String)">
            <summary>
            Create new string consists only ASCII characters
            </summary>
            <param name="source">Source string</param>
            <returns>New string with ASCII characters</returns>
        </member>
        <member name="M:FileCabinetApp.FileSystemWriter.AppendRange(System.Collections.Generic.IReadOnlyCollection{FileCabinetApp.FileCabinetRecord})">
            <summary>
            Add records to the end of data base
            </summary>
            <param name="records"></param>
        </member>
        <member name="M:FileCabinetApp.FileSystemWriter.RewriteWithAny(FileCabinetApp.FileCabinetRecord,System.Collections.Generic.ICollection{FileCabinetApp.FileCabinetRecord})">
            <summary>
            Overwrite the existing record by any one from records. After overwriting record is removed from array.
            </summary>
            <param name="read">Read from database record</param>
            <param name="records">Source records</param>
            <exception cref="T:System.ArgumentNullException">Record or records array are empty</exception>
        </member>
        <member name="M:FileCabinetApp.FileSystemWriter.MarkAsDeleted(System.Int32)">
            <summary>
            Mark record with source id as deleted
            </summary>
            <param name="id">Source record's id</param>
            <exception cref="T:System.ArgumentException">Record is already marked as deleted. The flag's value is wrong initially</exception>
        </member>
        <member name="M:FileCabinetApp.FileSystemWriter.Write(FileCabinetApp.FileCabinetRecord)">
            <summary>
            Write the record to data base
            </summary>
            <param name="record">Record to write</param>
            <exception cref="T:System.ArgumentNullException">Record is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.CreateRecord">
            <summary>
            The method create new record from user's input and return its id
            </summary>
            <returns>An id of current record</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.CreateRecord(FileCabinetApp.FileCabinetRecord)">
            <summary>
            The method create new record from source record and return its id
            </summary>
            <returns>An id of current record</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.GetStat">
            <summary>
            Returns number of records that the service stores
            </summary>
            <value>An ordinal number of the last record</value>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.ReadParameters(System.Int32)">
            <summary>
            Read parameters from keyboard and parse it to <see cref="T:FileCabinetApp.FileCabinetRecord"/> object
            </summary>
            <param name="id">Source id of read parameter</param>
            <returns><see cref="T:FileCabinetApp.FileCabinetServiceSnapshot"/> object equivalent for read parameters</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.ReadInput``1(System.Func{System.String,FileCabinetApp.ConversionResult{``0}})">
            <summary>
            Read data from keyboard, convert it by source converter and validate with source validator
            </summary>
            <typeparam name="T">Type of read data</typeparam>
            <param name="converter">Source converter</param>
            <returns>Correct input object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.EditRecord(FileCabinetApp.FileCabinetRecord)">
            <summary>
            Edit record with the source one
            </summary>
            <param name="record">Parameter contains new data</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.AppendToAllDictionaries(FileCabinetApp.FileCabinetRecord)">
            <summary>
            Append record to all dictionaries
            </summary>
            <param name="record">Source record</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.AppendToFirstNameDictionary(FileCabinetApp.FileCabinetRecord)">
            <summary>
            Append record to FirstNameDictionary
            </summary>
            <param name="record">Source record</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.AppendToLastNameDictionary(FileCabinetApp.FileCabinetRecord)">
            <summary>
            Append record to LastNameDictionary
            </summary>
            <param name="record">Source record</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.AppendToDateOfBirthDictionary(FileCabinetApp.FileCabinetRecord)">
            <summary>
            Append record to DateOfBirthDictionary
            </summary>
            <param name="record">Source record</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.RemoveFromAllDictionaries(FileCabinetApp.FileCabinetRecord)">
            <summary>
            Remove record from all dictionaries
            </summary>
            <param name="record">Source record to remove</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.FindByFirstName(System.String)">
            <summary>
            Find all occurrences of <see cref="T:FileCabinetApp.FileCabinetRecord"/> with suitable first name
            </summary>
            <param name="searchValue">First name to search</param>
            <returns><see cref="T:FileCabinetApp.FileCabinetRecord"/> array with suitable first name</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.FindByLastName(System.String)">
            <summary>
            Find all occurrences of <see cref="T:FileCabinetApp.FileCabinetRecord"/> with suitable last name
            </summary>
            <param name="searchValue">Last name to search</param>
            <returns><see cref="T:FileCabinetApp.FileCabinetRecord"/> array with suitable last name</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.FindByDateOfBirth(System.String)">
            <summary>
            Find all occurrences of <see cref="T:FileCabinetApp.FileCabinetRecord"/> with suitable date of birth
            </summary>
            <param name="searchValue">Date of birth to search</param>
            <returns><see cref="T:FileCabinetApp.FileCabinetRecord"/> array with suitable date of birth</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetMemoryService.MakeSnapshot">
            <summary>
            Create <see cref="T:FileCabinetApp.FileCabinetServiceSnapshot"/> object with current record array
            </summary>
            <returns><see cref="T:FileCabinetApp.FileCabinetServiceSnapshot"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.InputConverter.IdConverter(System.String)">
            <summary>
            Convert source id to its <see cref="T:System.Int32"/> representation
            </summary>
            <param name="id">Source id</param>
            <returns>Parsed <see cref="T:System.Int32"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.InputConverter.NameConverter(System.String)">
            <summary>
            Convert source string to its string representation
            </summary>
            <param name="source">Source name either first or last</param>
            <returns>Parsed <see cref="T:System.String"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.InputConverter.DateOfBirthConverter(System.String)">
            <summary>
            Converts source date of birth representation into it`s <see cref="T:System.DateTime"/> equivalent 
            </summary>
            <param name="dateOfBirth">Source date of birth</param>
            <returns>Parsed <see cref="T:System.DateTime"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.InputConverter.JobExperienceConverter(System.String)">
            <summary>
            Converts source job experience representation into it`s <see cref="T:System.Int16"/> equivalent 
            </summary>
            <param name="jobExperience">Source job experience</param>
            <returns>Parsed <see cref="T:System.Int16"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.InputConverter.WageConverter(System.String)">
            <summary>
            Converts source wage representation into it`s <see cref="T:System.Decimal"/> equivalent 
            </summary>
            <param name="wage">Source wage</param>
            <returns>Parsed <see cref="T:System.Decimal"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.InputConverter.RankConverter(System.String)">
            <summary>
            Converts source rank representation into it`s <see cref="T:System.Char"/> equivalent
            </summary>
            <param name="rank">Source rank</param>
            <returns>Parsed <see cref="T:System.Char"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.Handlers.CreateCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Create record in current service
            </summary>
            <param name="request">Object contains command and it's parameters</param>
            <exception cref="T:System.ArgumentNullException">Request in null</exception>
        </member>
        <member name="M:FileCabinetApp.Handlers.EditCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Edit the record with entered id
            </summary>
            <param name="request">Object contains command and it's parameters</param>
            <exception cref="T:System.ArgumentNullException">Request in null</exception>
        </member>
        <member name="M:FileCabinetApp.Handlers.ExitCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Exit from application
            </summary>
            <param name="request">Object contains command and it's parameters</param>
        </member>
        <member name="M:FileCabinetApp.Handlers.ExportCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Serialize all records in file with entered format
            </summary>
            <param name="request">Object contains command and it's parameters</param>
            <exception cref="T:System.ArgumentNullException">Request in null</exception>
        </member>
        <member name="M:FileCabinetApp.Handlers.FindCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Prints all records with suitable attribute
            </summary>
            <param name="request">Object contains command and it's parameters</param>
            <exception cref="T:System.ArgumentNullException">Request in null</exception>
        </member>
        <member name="M:FileCabinetApp.Handlers.FindCommandHandler.FindByAttribute(System.String,System.String)">
            <summary>
            Create an array where any attribute element equals searchValue
            </summary>
            <param name="attribute">Search property</param>
            <param name="searchValue">Value to search</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Entered attribute is not exist</exception>
        </member>
        <member name="M:FileCabinetApp.Handlers.HelpCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Prints help message
            </summary>
            <param name="request">Object contains command and it's parameters</param>
            <exception cref="T:System.ArgumentNullException">Request in null</exception>
        </member>
        <member name="M:FileCabinetApp.Handlers.ImportCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Import records from source file
            </summary>
            <param name="request">Object contains command and it's parameters</param>
            <exception cref="T:System.ArgumentNullException">Request in null</exception>
        </member>
        <member name="M:FileCabinetApp.Handlers.ListCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Return list of records added to current service
            </summary>
        </member>
        <member name="M:FileCabinetApp.Handlers.PurgeCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Remove all records marked as deleted from source database
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:FileCabinetApp.Handlers.RemoveCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Remove record from current service. If service storage is file, it marks the record as deleted
            </summary>
            <param name="request">Object contains command and it's parameters</param>
            <exception cref="T:System.ArgumentNullException">Request in null</exception>
        </member>
        <member name="M:FileCabinetApp.Handlers.StatCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Prints the amount of records
            </summary>
        </member>
        <member name="M:FileCabinetApp.Import.FIleCabinetCsvReader.ReadAll">
            <summary>
            Read all records from current base file written in csv
            </summary>
            <returns><see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:FileCabinetApp.FileCabinetRecord"/></returns>
        </member>
        <member name="M:FileCabinetApp.Import.FIleCabinetCsvReader.DeserializeFromCsvLine(System.String)">
            <summary>
            Deserialize <see cref="T:FileCabinetApp.FileCabinetRecord"/> from source line
            </summary>
            <param name="csvLine">Source line in csv format</param>
            <returns><see cref="T:FileCabinetApp.FileCabinetRecord"/> object</returns>
            <exception cref="T:System.ArgumentException">The amount of parameters in line doesn't correspond
            to <see cref="T:FileCabinetApp.FileCabinetRecord"/></exception>
        </member>
        <member name="M:FileCabinetApp.Import.FIleCabinetCsvReader.Parse``1(System.String,System.Func{System.String,FileCabinetApp.ConversionResult{``0}})">
            <summary>
            Parse source string to suitable <see cref="T:FileCabinetApp.FileCabinetRecord"/> parameter applying certain rules
            to convert and validate
            </summary>
            <param name="source">Source string to parse</param>
            <param name="converter">Source converter with convert methods</param>
            <typeparam name="T">The output parsing type</typeparam>
            <returns>Object parsed to output type and satisfied validator's methods</returns>
            <exception cref="T:System.ArgumentException">Cannot convert the source value
            or it's doesnt satisfy validation rules </exception>
        </member>
        <member name="M:FileCabinetApp.Import.FileCabinetXmlReader.ReadAll">
            <summary>
            Read all records from current base file written in xml
            </summary>
            <returns><see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:FileCabinetApp.FileCabinetRecord"/></returns>
        </member>
        <member name="M:FileCabinetApp.Import.FileCabinetXmlReader.ToFileCabinetRecord(FileCabinetApp.RecordXml)">
            <summary>
            Parse <see cref="T:FileCabinetApp.RecordXml"/> record to <see cref="T:FileCabinetApp.FileCabinetRecord"/>
            </summary>
            <param name="record">Source record</param>
            <returns>Suitable <see cref="T:FileCabinetApp.FileCabinetRecord"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.ValidationRules.CommandLineParser.SetValidationRule(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create <see cref="T:FileCabinetApp.IFileCabinetService"/> object according to entered command parameter
            </summary>
            <param name="args">Source command parameter</param>
            <exception cref="T:System.ArgumentException">Thrown when there is no such command parameter, or it is not exist.</exception>
            <returns></returns>
        </member>
        <member name="M:FileCabinetApp.DateOfBirthValidator.Validate(FileCabinetApp.FileCabinetRecord)">
            <summary>
            Validate current record's date of birth
            </summary>
            <param name="record">Source record to validate</param>
            <exception cref="T:System.ArgumentNullException">Date of birth is null or whitespace</exception>
            <exception cref="T:System.ArgumentException">Date of birth is not in dd/MM/yyyy format.
            Date of birth is not in range of current minimum and maximum value</exception>
        </member>
        <member name="M:FileCabinetApp.FirstNameValidator.Validate(FileCabinetApp.FileCabinetRecord)">
            <summary>
            Validate current record's first name
            </summary>
            <param name="record">Source record to validate</param>
            <exception cref="T:System.ArgumentException">First name's length is not in range of current minimum and maximum value</exception>
        </member>
        <member name="M:FileCabinetApp.IdValidator.Validate(FileCabinetApp.FileCabinetRecord)">
            <summary>
            Validate current record's id
            </summary>
            <param name="record">Source record to validate</param>
        </member>
        <member name="M:FileCabinetApp.JobExperienceValidator.Validate(FileCabinetApp.FileCabinetRecord)">
            <summary>
            Validate current record's job experience
            <param name="record">Source record to validate</param>
            </summary>
            <exception cref="T:System.ArgumentException">Job experience is null.
            Job experience is not an integer or less than zero or greater than short.MaxValue.
            Job experience is not in range of current minimum and maximum value.</exception>
        </member>
        <member name="M:FileCabinetApp.LastNameValidator.Validate(FileCabinetApp.FileCabinetRecord)">
            <summary>
            Validate current record's last name
            </summary>
            <param name="record">Source record to validate</param>
            <exception cref="T:System.ArgumentException">First name's length is not in range of current minimum and maximum value</exception>
        </member>
        <member name="M:FileCabinetApp.RankValidator.Validate(FileCabinetApp.FileCabinetRecord)">
            <summary>
            Validate current record's rank
            </summary>
            <param name="record">Source record to validate</param>
            <exception cref="T:System.ArgumentNullException">Record is null</exception>
            <exception cref="T:System.ArgumentException">Record's rank is not defined in current rank system</exception>
        </member>
        <member name="M:FileCabinetApp.SalaryValidator.Validate(FileCabinetApp.FileCabinetRecord)">
            <summary>
            Validate current record's salary
            </summary>
            <exception cref="T:System.ArgumentException">Wage is null.
            Wage is not an integer or greater than decimal.MaxValue.
            Wage is less than zero or less than current minimal value</exception>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FileCabinetApp</name>
    </assembly>
    <members>
        <member name="M:FileCabinetApp.Export.FIleCabinetCsvWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Create <see cref="T:FileCabinetApp.Export.FIleCabinetCsvWriter"/> object by source <see cref="T:System.IO.TextWriter"/> stream
            </summary>
            <param name="file">Source stream</param>
        </member>
        <member name="M:FileCabinetApp.Export.FIleCabinetCsvWriter.Write(FileCabinetApp.FileCabinetService.FileCabinetRecord[])">
            <summary>
            Serialize source record to current <see cref="T:System.IO.TextWriter"/>
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:FileCabinetApp.Export.FileCabinetServiceSnapshot.SaveToCsv(System.IO.StreamWriter)">
            <summary>
            Create csv file to source <see cref="T:System.IO.StreamWriter"/> file
            </summary>
            <param name="file">Source file</param>
        </member>
        <member name="M:FileCabinetApp.Export.FileCabinetServiceSnapshot.SaveToXml(System.IO.StreamWriter)">
            <summary>
            Create xml file to source <see cref="T:System.IO.StreamWriter"/> file
            </summary>
            <param name="file">Source file</param>
        </member>
        <member name="M:FileCabinetApp.Export.FileCabinetServiceSnapshot.CopyAndDelete(System.IO.FileStream,FileCabinetApp.FileCabinetService.IFileCabinetService)">
            <summary>
            Read all records from source file and delete it 
            </summary>
            <param name="file"></param>2
            <param name="service"></param>
            <returns><see cref="T:FileCabinetApp.Export.FileCabinetServiceSnapshot"/> snapshot created from source file</returns>
            <exception cref="T:System.ArgumentNullException">Source file or service are null</exception>
        </member>
        <member name="M:FileCabinetApp.Export.FileCabinetXmlWriter.Write(FileCabinetApp.FileCabinetService.FileCabinetRecord[])">
            <summary>
            Serialize record to xml format
            </summary>
            <param name="records">Source record</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileCabinetFilesystemService.CreateRecord(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Create new record in base file with source parameters
            </summary>
            <param name="record">Source parameters to add</param>
            <returns>Id of created record</returns>
            <exception cref="T:System.ArgumentNullException">Parameters are null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileCabinetFilesystemService.GetRecords">
            <summary>
            Read all records from base file convert to <see cref="T:FileCabinetApp.FileCabinetService.FileSystemService.FilesystemRecord"/> array
            </summary>
            <returns>Array of <see cref="T:FileCabinetApp.FileCabinetService.FileSystemService.FilesystemRecord"/></returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileCabinetFilesystemService.GetStat">
            <summary>
            Get count of records in base file
            </summary>
            <returns>The amount of all records in base file</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileCabinetFilesystemService.ReadParameters(System.Int32)">
            <summary>
            Read parameters from keyboard and parse it to <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/> object
            </summary>
            <param name="id">Source id of read parameter</param>
            <returns><see cref="T:FileCabinetApp.Export.FileCabinetServiceSnapshot"/> object equivalent for read parameters</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileCabinetFilesystemService.ReadInput``1(System.Func{System.String,FileCabinetApp.Results.ConversionResult{``0}})">
            <summary>
            Read data from keyboard, convert it by source converter and validate with source validator
            </summary>
            <typeparam name="T">Type of read data</typeparam>
            <param name="converter">Source converter</param>
            <returns>Correct input object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileCabinetFilesystemService.Restore(FileCabinetApp.Export.FileCabinetServiceSnapshot)">
            <summary>
            Update current records with snapshot. If record is exist it will be overwritten, else append to end
            </summary>
            <param name="snapshot">Source snapshot</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileCabinetFilesystemService.Purge">
            <summary>
            Delete all records marked as delete from current file by creating a new one 
            </summary>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileSystemReader.ReadAndMoveCursorBack">
            <summary>
            Read the record and move cursor to it's beginning
            </summary>
            <returns></returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileSystemReader.ReadRecord">
            <summary>
            Read one record from base file consistently
            </summary>
            <returns>Read <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileSystemReader.Deserialize">
            <summary>
            Deserialize all content from source file into <see cref="T:FileCabinetApp.FileCabinetService.FileSystemService.FilesystemRecord"/> array
            </summary>
            <returns><see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/> array</returns>
            <exception cref="T:System.ArgumentNullException">stream is null</exception>
            <exception cref="T:System.ArgumentException">The file size does not correspond to the integer number of occurrences of the records</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FilesystemRecord.ToBytes(System.String,System.Int32)">
            <summary>
            Create <see cref="T:System.Byte"/> array from value with source capacity 
            </summary>
            <param name="value">Value to make array with</param>
            <param name="capacity">Source capacity</param>
            <returns> <see cref="T:System.Byte"/> array with length equals capacity </returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FilesystemRecord.Serialize(System.IO.FileStream)">
            <summary>
            Serialize current <see cref="T:FileCabinetApp.FileCabinetService.FileSystemService.FilesystemRecord"/> into source file
            </summary>
            <param name="stream">Source file stream</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FilesystemRecord.ToFileCabinetRecord">
            <summary>
            Cast current <see cref="T:FileCabinetApp.FileCabinetService.FileSystemService.FilesystemRecord"/> to <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/>
            </summary>
            <returns>Suitable <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FilesystemRecord.ToAscii(System.String)">
            <summary>
            Create new string consists only ASCII characters
            </summary>
            <param name="source">Source string</param>
            <returns>New string with ASCII characters</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileSystemWriter.AppendRange(System.Collections.Generic.IList{FileCabinetApp.FileCabinetService.FileCabinetRecord})">
            <summary>
            Add records to the end of data base
            </summary>
            <param name="records"></param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileSystemWriter.RewriteWithAny(FileCabinetApp.FileCabinetService.FileCabinetRecord,System.Collections.Generic.ICollection{FileCabinetApp.FileCabinetService.FileCabinetRecord})">
            <summary>
            Overwrite the existing record by any one from records. After overwriting record is removed from array.
            </summary>
            <param name="read">Read from database record</param>
            <param name="records">Source records</param>
            <exception cref="T:System.ArgumentNullException">Record or records array are empty</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileSystemWriter.MarkAsDeleted(System.Int32)">
            <summary>
            Mark record with source id as deleted
            </summary>
            <param name="id">Source record's id</param>
            <exception cref="T:System.ArgumentException">Record is already marked as deleted. The flag's value is wrong initially</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileSystemWriter.Write(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Write the record to data base
            </summary>
            <param name="record">Record to write</param>
            <exception cref="T:System.ArgumentNullException">Record is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.InputConverter.IdConverter(System.String)">
            <summary>
            Convert source id to its <see cref="T:System.Int32"/> representation
            </summary>
            <param name="id">Source id</param>
            <returns>Parsed <see cref="T:System.Int32"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.InputConverter.NameConverter(System.String)">
            <summary>
            Convert source string to its string representation
            </summary>
            <param name="source">Source name either first or last</param>
            <returns>Parsed <see cref="T:System.String"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.InputConverter.DateOfBirthConverter(System.String)">
            <summary>
            Converts source date of birth representation into it`s <see cref="T:System.DateTime"/> equivalent 
            </summary>
            <param name="dateOfBirth">Source date of birth</param>
            <returns>Parsed <see cref="T:System.DateTime"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.InputConverter.JobExperienceConverter(System.String)">
            <summary>
            Converts source job experience representation into it`s <see cref="T:System.Int16"/> equivalent 
            </summary>
            <param name="jobExperience">Source job experience</param>
            <returns>Parsed <see cref="T:System.Int16"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.InputConverter.SalaryConverter(System.String)">
            <summary>
            Converts source wage representation into it`s <see cref="T:System.Decimal"/> equivalent 
            </summary>
            <param name="wage">Source wage</param>
            <returns>Parsed <see cref="T:System.Decimal"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.InputConverter.RankConverter(System.String)">
            <summary>
            Converts source rank representation into it`s <see cref="T:System.Char"/> equivalent
            </summary>
            <param name="rank">Source rank</param>
            <returns>Parsed <see cref="T:System.Char"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.MemoryService.FileCabinetMemoryService.CreateRecord(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            The method create new record from source record and return its id
            </summary>
            <returns>An id of current record</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.MemoryService.FileCabinetMemoryService.GetStat">
            <summary>
            Returns number of records that the service stores
            </summary>
            <value>An ordinal number of the last record</value>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.MemoryService.FileCabinetMemoryService.ReadParameters(System.Int32)">
            <summary>
            Read parameters from keyboard and parse it to <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/> object
            </summary>
            <param name="id">Source id of read parameter</param>
            <returns><see cref="T:FileCabinetApp.Export.FileCabinetServiceSnapshot"/> object equivalent for read parameters</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.MemoryService.FileCabinetMemoryService.ReadInput``1(System.Func{System.String,FileCabinetApp.Results.ConversionResult{``0}})">
            <summary>
            Read data from keyboard, convert it by source converter and validate with source validator
            </summary>
            <typeparam name="T">Type of read data</typeparam>
            <param name="converter">Source converter</param>
            <returns>Correct input object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.MemoryService.MemoryServiceDictionaries.Add(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Append record to all dictionaries
            </summary>
            <param name="record">Source record</param>
        </member>
        <member name="M:FileCabinetApp.Handlers.CreateCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Create record in current service
            </summary>
            <param name="request">Object contains command and it's parameters</param>
            <exception cref="T:System.ArgumentNullException">Request in null</exception>
        </member>
        <member name="M:FileCabinetApp.Handlers.DeleteCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Remove record from current service. If service storage is file, it marks the record as deleted
            </summary>
            <param name="request">Object contains command and it's parameters</param>
            <exception cref="T:System.ArgumentNullException">Request in null</exception>
        </member>
        <member name="M:FileCabinetApp.Handlers.DeleteCommandHandler.GetSearchAttribute(System.String)">
            <summary>
            Extract <see cref="T:FileCabinetApp.FileCabinetService.SearchValue"/> from source parameters
            </summary>
            <param name="parameters">Source parameters</param>
            <returns><see cref="T:FileCabinetApp.FileCabinetService.SearchValue"/> extracted from source string</returns>
            <exception cref="T:System.ArgumentException">Cant find delimiter <see cref="F:FileCabinetApp.Handlers.DeleteCommandHandler.Keyword"/></exception>
        </member>
        <member name="M:FileCabinetApp.Handlers.ErrorCommandHandler.PrintWithMaxMatch(System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.String}},System.Int32)">
            <summary>
            Prints all items from source record where match equals searchMatch
            </summary>
            <param name="matches">Source array of matches</param>
            <param name="searchMatch">Match to search</param>
        </member>
        <member name="M:FileCabinetApp.Handlers.ErrorCommandHandler.IsPartOfCommand(System.String,System.String)">
            <summary>
            Determine if input command is a part of the source string
            </summary>
            <param name="source">Source string</param>
            <param name="command">Command to search</param>
            <returns>True if the input command is a part of the source</returns>
        </member>
        <member name="M:FileCabinetApp.Handlers.ErrorCommandHandler.GetStartWith(System.String,System.String)">
            <summary>
            Counts the number of identical characters of command from the beginning of source 
            </summary>
            <param name="source">Source string</param>
            <param name="command">Source command</param>
            <returns>Total number of matches</returns>
        </member>
        <member name="M:FileCabinetApp.Handlers.ExitCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Exit from application
            </summary>
            <param name="request">Object contains command and it's parameters</param>
        </member>
        <member name="M:FileCabinetApp.Handlers.ExportCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Serialize all records in file with entered format
            </summary>
            <param name="request">Object contains command and it's parameters</param>
            <exception cref="T:System.ArgumentNullException">Request in null</exception>
        </member>
        <member name="M:FileCabinetApp.Handlers.ExportCommandHandler.Export(System.String,System.Nullable{FileCabinetApp.Handlers.Helpers.ExportFormat})">
            <summary>
            Export all records from current service in file with the input path and input format. If file is not exist
            it will be created
            </summary>
            <param name="path">Absolute path to the export file</param>
            <param name="format">Format of the export file</param>
            <exception cref="T:System.ArgumentNullException">Export format is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Export format is not supported</exception>
        </member>
        <member name="M:FileCabinetApp.Handlers.ExportCommandHandler.DirectoryIsAllowed(System.String)">
            <summary>
            Determine whether the directory is allowed, file of source directory is exist and if it is
            request permission to rewrite
            </summary>
            <param name="sourceDirectory">Source directory</param>
            <returns>True if file is not exist or rewrite is allowed</returns>
        </member>
        <member name="M:FileCabinetApp.Handlers.ExportCommandHandler.AllowRewriteIfExist">
            <summary>
            Get the permission to rewrite the file
            </summary>
            <returns>True of allowed</returns>
        </member>
        <member name="M:FileCabinetApp.Handlers.ExportCommandHandler.GetExportFormat(System.String)">
            <summary>
            Parse string representation of <see cref="T:FileCabinetApp.Handlers.Helpers.ExportFormat"/>
            </summary>
            <param name="parameters">Source string to parse</param>
            <returns>Parsed <see cref="T:FileCabinetApp.Handlers.Helpers.ExportFormat"/></returns>
        </member>
        <member name="M:FileCabinetApp.Handlers.HelpCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Prints help message
            </summary>
            <param name="request">Object contains command and it's parameters</param>
            <exception cref="T:System.ArgumentNullException">Request in null</exception>
        </member>
        <member name="M:FileCabinetApp.Handlers.Helpers.DefaultLineExtractor.ExtractSearchValues(System.String,System.String)">
            <summary>
            Create <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:FileCabinetApp.FileCabinetService.SearchValue"/> from source string with values enumerated by source delimiter
            </summary>
            <param name="source">source string</param>
            <param name="delimiter">source delimiter</param>
            <returns><see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:FileCabinetApp.FileCabinetService.SearchValue"/></returns>
            <exception cref="T:System.ArgumentNullException">Source string is null or empty</exception>
        </member>
        <member name="M:FileCabinetApp.Handlers.ImportCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Import records from source file
            </summary>
            <param name="request">Object contains command and it's parameters</param>
            <exception cref="T:System.ArgumentNullException">Request in null</exception>
        </member>
        <member name="M:FileCabinetApp.Handlers.PurgeCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Remove all records marked as deleted from source database
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:FileCabinetApp.Handlers.SelectCommandHandler.SetPrinterAsTable(System.String)">
            <summary>
            Create table printer by parsing parameters
            </summary>
            <param name="parameters">Command line parameters</param>
        </member>
        <member name="M:FileCabinetApp.Handlers.SelectCommandHandler.GetProperties(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Cast array of string properties to array of <see cref="T:FileCabinetApp.FileCabinetService.SearchValue.SearchProperty"/>
            </summary>
            <param name="keys">Array of string representation of properties</param>
            <returns>Source array parsed to <see cref="T:FileCabinetApp.FileCabinetService.SearchValue.SearchProperty"/></returns>
        </member>
        <member name="M:FileCabinetApp.Handlers.SelectCommandHandler.FindDelimiter(System.String,System.Collections.Generic.IReadOnlyCollection{FileCabinetApp.Printers.LogicalOperand})">
            <summary>
            Determine whether the source string contains any from delimiters
            </summary>
            <param name="source">source string</param>
            <param name="delimiters">Array of delimiters to search</param>
            <returns>Index of find delimiter</returns>
        </member>
        <member name="M:FileCabinetApp.Handlers.StatCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Prints the amount of existing and deleted records
            </summary>
        </member>
        <member name="M:FileCabinetApp.Import.FIleCabinetCsvReader.ReadAll">
            <summary>
            Read all records from current base file written in csv
            </summary>
            <returns><see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/></returns>
        </member>
        <member name="M:FileCabinetApp.Import.FIleCabinetCsvReader.TryDeserializeFromCsvLine(System.String,System.Int32@,FileCabinetApp.FileCabinetService.FileCabinetRecord@)">
            <summary>
            Deserialize <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/> from source line
            </summary>
            <param name="csvLine">Source line in csv format</param>
            <returns>True if import is successful</returns>
        </member>
        <member name="M:FileCabinetApp.Import.FIleCabinetCsvReader.DeserializeFromCsvLine(System.String)">
            <summary>
            Deserialize <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/> from source line
            </summary>
            <param name="csvLine">Source line in csv format</param>
            <returns><see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/> object</returns>
            <exception cref="T:System.ArgumentException">The amount of parameters in line doesn't correspond
            to <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/></exception>
        </member>
        <member name="M:FileCabinetApp.Import.FIleCabinetCsvReader.Parse``1(System.String,System.Func{System.String,FileCabinetApp.Results.ConversionResult{``0}})">
            <summary>
            Parse source string to suitable <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/> parameter applying certain rules
            to convert and validate
            </summary>
            <param name="source">Source string to parse</param>
            <param name="converter">Source converter with convert methods</param>
            <typeparam name="T">The output parsing type</typeparam>
            <returns>Object parsed to output type and satisfied validator's methods</returns>
            <exception cref="T:System.ArgumentException">Cannot convert the source value
            or it's doesnt satisfy validation rules </exception>
        </member>
        <member name="M:FileCabinetApp.Import.FileCabinetXmlReader.ReadAll">
            <summary>
            Read all records from current base file written in xml
            </summary>
            <returns><see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/></returns>
        </member>
        <member name="M:FileCabinetApp.Import.FileCabinetXmlReader.ToFileCabinetRecord(FileCabinetApp.Export.RecordXml)">
            <summary>
            Parse <see cref="T:FileCabinetApp.Export.RecordXml"/> record to <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/>
            </summary>
            <param name="record">Source record</param>
            <returns>Suitable <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.Printers.Table.TablePrinter.Print(System.Collections.Generic.IEnumerable{FileCabinetApp.FileCabinetService.FileCabinetRecord})">
            <summary>
            Find the suitable records from source array and print them in table. If properties to search wasn't not specified it prints
            all the properties of record. If 'where' wasn't not specified it prints all records from source array
            </summary>
            <param name="records">Source record</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:FileCabinetApp.Printers.Table.TablePrinter.SatisfyAll(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Determine whether the source record properties are equals to current ones
            </summary>
            <param name="record"></param>
            <returns>False if it's not equals to any</returns>
        </member>
        <member name="M:FileCabinetApp.Printers.Table.TablePrinter.SatisfyAny(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Determine whether the source record properties are equals to any from current ones
            </summary>
            <param name="record"></param>
            <returns>True if it's equals to any</returns>
        </member>
        <member name="M:FileCabinetApp.Validation.CommandLineParser.SetValidationRule(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create <see cref="T:FileCabinetApp.FileCabinetService.IFileCabinetService"/> object according to entered command parameter
            </summary>
            <param name="args">Source command parameter</param>
            <exception cref="T:System.ArgumentException">Thrown when there is no such command parameter, or it is not exist.</exception>
            <returns></returns>
        </member>
        <member name="M:FileCabinetApp.Validators.DateOfBirthValidator.Validate(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Validate current record's date of birth
            </summary>
            <param name="record">Source record to validate</param>
            <exception cref="T:System.ArgumentNullException">Date of birth is null or whitespace</exception>
            <exception cref="T:System.ArgumentException">Date of birth is not in dd/MM/yyyy format.
            Date of birth is not in range of current minimum and maximum value</exception>
        </member>
        <member name="M:FileCabinetApp.Validators.FirstNameValidator.Validate(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Validate current record's first name
            </summary>
            <param name="record">Source record to validate</param>
            <exception cref="T:System.ArgumentException">First name's length is not in range of current minimum and maximum value</exception>
        </member>
        <member name="M:FileCabinetApp.Validators.IdValidator.Validate(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Validate current record's id
            </summary>
            <param name="record">Source record to validate</param>
        </member>
        <member name="M:FileCabinetApp.Validators.JobExperienceValidator.Validate(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Validate current record's job experience
            <param name="record">Source record to validate</param>
            </summary>
            <exception cref="T:System.ArgumentException">Job experience is null.
            Job experience is not an integer or less than zero or greater than short.MaxValue.
            Job experience is not in range of current minimum and maximum value.</exception>
        </member>
        <member name="M:FileCabinetApp.Validators.LastNameValidator.Validate(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Validate current record's last name
            </summary>
            <param name="record">Source record to validate</param>
            <exception cref="T:System.ArgumentException">First name's length is not in range of current minimum and maximum value</exception>
        </member>
        <member name="M:FileCabinetApp.Validators.RankValidator.Validate(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Validate current record's rank
            </summary>
            <param name="record">Source record to validate</param>
            <exception cref="T:System.ArgumentNullException">Record is null</exception>
            <exception cref="T:System.ArgumentException">Record's rank is not defined in current rank system</exception>
        </member>
        <member name="M:FileCabinetApp.Validators.SalaryValidator.Validate(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Validate current record's salary
            </summary>
            <exception cref="T:System.ArgumentException">Wage is null.
            Wage is not an integer or greater than decimal.MaxValue.
            Wage is less than zero or less than current minimal value</exception>
        </member>
    </members>
</doc>

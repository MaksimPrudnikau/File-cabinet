<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FileCabinetApp</name>
    </assembly>
    <members>
        <member name="T:FileCabinetApp.EnglishSource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Action_Message">
            <summary>
              Looks up a localized string similar to {0} - Calling method {1}().
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.All_records_are_exported_to_file">
            <summary>
              Looks up a localized string similar to All records are exported to file {0}.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Answer_must_be_either_Y_or_n">
            <summary>
              Looks up a localized string similar to Answer must be either Y or n.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Cannot_find_keyword">
            <summary>
              Looks up a localized string similar to Cannot find key word &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Cannot_use_both_logger_and_stopwatch">
            <summary>
              Looks up a localized string similar to Cannot use both logger and stopwatch.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Cant_deserialize">
            <summary>
              Looks up a localized string similar to Error: cant deserialize {0}! {1}: {2}.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.console">
            <summary>
              Looks up a localized string similar to &gt; .
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.create">
            <summary>
              Looks up a localized string similar to Record #{0} is created.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Create_description">
            <summary>
              Looks up a localized string similar to Create record in current service. If default service is selected, parameters from the custom one.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.date_of_birth">
            <summary>
              Looks up a localized string similar to Date of birth: .
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Date_Of_Birth_Is_Greater_Than_Maximal">
            <summary>
              Looks up a localized string similar to The date of birth is greater than it`s maximal value.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Date_Of_Birth_Is_Less_Than_Minimal">
            <summary>
              Looks up a localized string similar to The date of birth is less than it`s minimal value.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Delete_description">
            <summary>
              Looks up a localized string similar to Remove record from current service. If service storage is file, it marks the record as deleted.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.developed_by">
            <summary>
              Looks up a localized string similar to File Cabinet Application, developed by {0}.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Error__wrong_conversion">
            <summary>
              Looks up a localized string similar to {0} Error: wrong conversion.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.ErrorCommandHandler_Handle_Is_Not_A_Command">
             <summary>
               Looks up a localized string similar to &apos;{0}&apos; is not a command. See &apos;help&apos;.
            .
             </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.exit">
            <summary>
              Looks up a localized string similar to Exiting an application....
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Exit_decription">
            <summary>
              Looks up a localized string similar to Exit from application.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Export_description">
            <summary>
              Looks up a localized string similar to Serialize all records in file with entered format.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Export_File_is_exist">
            <summary>
              Looks up a localized string similar to File is exist - rewrite? [Y/n].
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Export_format_cannot_be_null">
            <summary>
              Looks up a localized string similar to Export format cannot be null.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Export_type_is_not_supported">
            <summary>
              Looks up a localized string similar to {0}-export is not supported.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.File_is_not_exist">
            <summary>
              Looks up a localized string similar to Cannot open file from {0}. File is not exist.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.first_name">
            <summary>
              Looks up a localized string similar to First name: .
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Help_description">
            <summary>
              Looks up a localized string similar to Prints help message.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.hint">
            <summary>
              Looks up a localized string similar to Enter your command, or enter &apos;help&apos; to get help..
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Id_cannot_be_updated">
            <summary>
              Looks up a localized string similar to Id cannot be updated.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Id_is_less_than_zero">
            <summary>
              Looks up a localized string similar to Id is less than zero.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Import_description">
            <summary>
              Looks up a localized string similar to Import records from source file.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.ImportCommandHandler_The_format_is_not_supported">
            <summary>
              Looks up a localized string similar to The format {0} is not supported.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Insert_description">
             <summary>
               Looks up a localized string similar to Insert a new value to the current service. The value is inserted before the first record with a greater ID.
            The identificator, first name, last name and date of birth values are required because the are initial for
            any record. Number of the properties must be correspond with values. Quotes in values are optional.
             </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.job_experience">
            <summary>
              Looks up a localized string similar to Job experience: .
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Job_Experience_Is_Less_Than_Minimal">
            <summary>
              Looks up a localized string similar to The job experience is less than it`s minimal value.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.JobExperience_Is_Greater_Than_Maximal">
            <summary>
              Looks up a localized string similar to The job experience is greater than it`s minimal value.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.last_name">
            <summary>
              Looks up a localized string similar to Last name: .
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.method_execution_duration_ticks">
            <summary>
              Looks up a localized string similar to {0} method execution duration is {1} ticks..
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Method_With_Parameter_Message">
            <summary>
              Looks up a localized string similar to {0} - Calling method {1}() with parameter &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Method_With_Return_Value_Message">
            <summary>
              Looks up a localized string similar to {0} - method {1}() return &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.missing_one_parameter">
            <summary>
              Looks up a localized string similar to {0} missing one parameter.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.NameWrongLength">
            <summary>
              Looks up a localized string similar to The name&apos;s length is less than minimal or greater than it&apos;s maximal value.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Number_of_keys_doesnt_correspond_to_number_of_values">
            <summary>
              Looks up a localized string similar to Number of keys doesnt correspond to number of values.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Parameter_values_should_be_enclosed_in_brackets">
            <summary>
              Looks up a localized string similar to Parameter values should be enclosed in brackets.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.rank">
            <summary>
              Looks up a localized string similar to Rank: .
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Rank_Is_Not_Defined_In_Grades">
            <summary>
              Looks up a localized string similar to Rank is not defined in current grades.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.ReadInput_Conversion_failed">
            <summary>
              Looks up a localized string similar to Conversion failed: {0}. Please, correct your input..
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Record_at_line_Error">
            <summary>
              Looks up a localized string similar to Record at line {0} Error: {1}.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Record_number_error">
            <summary>
              Looks up a localized string similar to Record #{0}: {1}.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Record_with_id_is_already_exist">
            <summary>
              Looks up a localized string similar to Record with id = &apos;{0}&apos; is already exist.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Records_0_where_updated">
            <summary>
              Looks up a localized string similar to Records #{0} where updated.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Records_are_deleted">
            <summary>
              Looks up a localized string similar to Record #{0} are deleted.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.records_were_written_to">
            <summary>
              Looks up a localized string similar to {0} records were written to {1}.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Salary_Is_Greater_Than_Maximal">
            <summary>
              Looks up a localized string similar to Wage is greater than it`s maximal value.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Salary_Is_Less_Than_Minimal">
            <summary>
              Looks up a localized string similar to Wage is less than it`s minimal value.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Service_And_Validator_info">
            <summary>
              Looks up a localized string similar to Service = {0}, Validator = {1}.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.stat">
            <summary>
              Looks up a localized string similar to {0} record(s), {1} deleted..
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Suitable_records_not_found">
            <summary>
              Looks up a localized string similar to Record with {0} = &apos;{1}&apos; are not found.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.The_most_similar_commands_are">
            <summary>
              Looks up a localized string similar to The most similar commands are.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.The_name_contains_non_letter_characters">
            <summary>
              Looks up a localized string similar to The name contains non-letter characters.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.The_name_is_null_or_whitespace">
            <summary>
              Looks up a localized string similar to The name is null or whitespace.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Too_much_parameters">
            <summary>
              Looks up a localized string similar to Too much parameters: {0}.
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.wage">
            <summary>
              Looks up a localized string similar to Wage: .
            </summary>
        </member>
        <member name="P:FileCabinetApp.EnglishSource.Wrong_data_format">
            <summary>
              Looks up a localized string similar to Wrong data format.
            </summary>
        </member>
        <member name="M:FileCabinetApp.Export.FIleCabinetCsvWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Create <see cref="T:FileCabinetApp.Export.FIleCabinetCsvWriter"/> object by source <see cref="T:System.IO.TextWriter"/> stream
            </summary>
            <param name="file">Source stream</param>
        </member>
        <member name="M:FileCabinetApp.Export.FIleCabinetCsvWriter.Write(System.Collections.Generic.IEnumerable{FileCabinetApp.FileCabinetService.FileCabinetRecord},System.Char)">
            <summary>
            Serialize source records to current <see cref="T:System.IO.TextWriter"/>
            </summary>
            <param name="record">Source records to write</param>
        </member>
        <member name="M:FileCabinetApp.Export.FileCabinetServiceSnapshot.SaveToCsv(System.IO.StreamWriter)">
            <summary>
            Create csv file to source <see cref="T:System.IO.StreamWriter"/> file
            </summary>
            <param name="file">Source file</param>
        </member>
        <member name="M:FileCabinetApp.Export.FileCabinetServiceSnapshot.SaveToXml(System.IO.StreamWriter)">
            <summary>
            Create xml file to source <see cref="T:System.IO.StreamWriter"/> file
            </summary>
            <param name="file">Source file</param>
        </member>
        <member name="M:FileCabinetApp.Export.FileCabinetServiceSnapshot.LoadFromCsv(System.IO.StreamReader)">
            <summary>
            Read all records from source reader written in csv format
            </summary>
            <param name="reader">Source stream to read</param>
        </member>
        <member name="M:FileCabinetApp.Export.FileCabinetServiceSnapshot.LoadFromXml(System.IO.StreamReader)">
            <summary>
            Read all records from source reader written in xml format
            </summary>
            <param name="reader">Source stream to read</param>
        </member>
        <member name="M:FileCabinetApp.Export.FileCabinetServiceSnapshot.CopyAndDelete(System.IO.FileStream,FileCabinetApp.FileCabinetService.IFileCabinetService)">
            <summary>
            Read all records from source file and delete it 
            </summary>
            <param name="file">Source stream</param>
            <param name="service">Current <see cref="T:FileCabinetApp.FileCabinetService.IFileCabinetService"/> service</param>
            <returns><see cref="T:FileCabinetApp.Export.FileCabinetServiceSnapshot"/> snapshot created from source file</returns>
            <exception cref="T:System.ArgumentNullException">Source file or service are null</exception>
        </member>
        <member name="M:FileCabinetApp.Export.FileCabinetXmlWriter.Write(System.Collections.Generic.IEnumerable{FileCabinetApp.FileCabinetService.FileCabinetRecord})">
            <summary>
            Serialize record to xml format
            </summary>
            <param name="records">Source record</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.Decorators.Logger.FileSystemLogger.GetCurrentTime">
            <summary>
            Create message with current time
            </summary>
            <example>04/10/2008 06:30</example>
            <returns><see cref="T:System.String"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.Decorators.Logger.FileSystemLogger.GetActionMessage(System.String)">
            <summary>
            Create message to method without parameters and return value
            </summary>
            <param name="methodName">Name of the method</param>
            <example>04/10/2008 06:30 - Calling Create()</example>
            <returns><see cref="T:System.String"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.Decorators.Logger.FileSystemLogger.GetMethodWithRecordMessage(FileCabinetApp.FileCabinetService.FileCabinetRecord,System.String)">
            <summary>
            Create message where record is a parameter
            </summary>
            <param name="record">The record to print</param>
            <param name="functionName">Method's name</param>
            <example>04/10/2008 06:30 - Calling Create() with Firstname = 'Ivan', LastName = 'Ivanov'... and etc.</example>
            <returns><see cref="T:System.String"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.Decorators.Logger.FileSystemLogger.GetMethodWithParameterMessage``1(System.String,``0)">
            <summary>
            Create method with a parameter
            </summary>
            <param name="methodName">Method's name</param>
            <param name="parameter">Method's parameter</param>
            <typeparam name="T">The object with implemented <see cref="M:System.Object.ToString"/></typeparam>
            <example>04/10/2008 06:30 - Calling Delete() with parameter 'where id='1''</example>
            <returns><see cref="T:System.String"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.Decorators.Logger.FileSystemLogger.GetMethodWithReturnValueMessage``1(System.String,``0)">
            <summary>
            Create message with elapsed ticks
            </summary>
            <param name="functionName">Method's name</param>
            <param name="returnValue">The ticks means time to execute method</param>
            <typeparam name="T">The object with implemented <see cref="M:System.Object.ToString"/></typeparam>
            <example>04/10/2008 06:30 - Delete() returned '5472384'</example>
            <returns><see cref="T:System.String"/> message</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.Decorators.Logger.FileSystemLogger.LogMethod``2(System.Func{``0,``1},``0)">
            <summary>
            Invoke method and log it into source file
            </summary>
            <param name="method">Delegate to the method to invoke</param>
            <param name="parameter">The method's parameter</param>
            <typeparam name="TIn">Input parameter type</typeparam>
            <typeparam name="TOut">Output parameter type</typeparam>
            <returns>Source method return value</returns>
            <exception cref="T:System.ArgumentNullException">The method's delegate is null or in the case method's parameter
            is <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/>, the record is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.Decorators.Logger.FileSystemLogger.LogMethod``1(System.Func{``0})">
            <summary>
            Invoke method and log it into source file
            </summary>
            <param name="method">Delegate to the method to invoke</param>
            <typeparam name="T">Input parameter type</typeparam>
            <returns>Source method return value</returns>
            <exception cref="T:System.ArgumentNullException">The method's delegate is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.Decorators.Logger.FileSystemLogger.LogMethod``1(System.Action{``0},``0)">
            <summary>
            Invoke method and log it into source file
            </summary>
            <param name="method">Delegate to the method to invoke</param>
            <param name="parameter">Method's parameter</param>
            <typeparam name="T">Input parameter type</typeparam>
            <exception cref="T:System.ArgumentNullException">The method's delegate is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.Decorators.Logger.FileSystemLogger.LogMethod(System.Action)">
            <summary>
            Invoke method and log it into source file
            </summary>
            <param name="method">Delegate to the method to invoke</param>
            <exception cref="T:System.ArgumentNullException">The method's delegate is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.Decorators.Logger.FileSystemLogger.LogMethod``3(System.Func{``0,``1,``2},``0,``1)">
            <summary>
            Invoke method and log it into source file
            </summary>
            <param name="method">Delegate to the method to invoke</param>
            <param name="first">First input parameter</param>
            <param name="second">Second input parameter</param>
            <typeparam name="T1">Method's first parameter type</typeparam>
            <typeparam name="T2">Method's second parameter type</typeparam>
            <typeparam name="T">Method's return value</typeparam>
            <returns>Method's return value</returns>
            <exception cref="T:System.ArgumentNullException">The method's delegate is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.Decorators.Meter.TicksMeter.GetElapsedTicks``2(System.Func{``0,``1},``0,``1@)">
            <summary>
            Get the method's execution time in elapsed ticks
            </summary>
            <param name="method">Delegate to the method to invoke</param>
            <param name="parameter">Method's parameter</param>
            <param name="methodsOut">Method's return value</param>
            <typeparam name="TIn">Input parameter type</typeparam>
            <typeparam name="TOut">Method's return value type</typeparam>
            <returns>Method's execution time in elapsed ticks</returns>
            <exception cref="T:System.ArgumentNullException">The delegate is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.Decorators.Meter.TicksMeter.GetElapsedTicks``1(System.Func{``0},``0@)">
            <summary>
            Get the method's execution time in elapsed ticks
            </summary>
            <param name="method">Delegate to the method to invoke</param>
            <param name="methodsOut">Method's return value</param>
            <typeparam name="T">Method's return value type</typeparam>
            <returns>Method's execution time in elapsed ticks</returns>
            <exception cref="T:System.ArgumentNullException">The delegate is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.Decorators.Meter.TicksMeter.GetElapsedTicks``1(System.Action{``0},``0)">
            <summary>
            Get the method's execution time in elapsed ticks
            </summary>
            <param name="method">Delegate to the method to invoke</param>
            <param name="parameter">Method's parameter</param>
            <typeparam name="T">Method's return value type</typeparam>
            <returns>Method's execution time in elapsed ticks</returns>
            <exception cref="T:System.ArgumentNullException">The delegate is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.Decorators.Meter.TicksMeter.GetElapsedTicks(System.Action)">
            <summary>
            Get the method's execution time in elapsed ticks
            </summary>
            <param name="method">Delegate to the method to invoke</param>
            <returns>Method's execution time in elapsed ticks</returns>
            <exception cref="T:System.ArgumentNullException">The delegate is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.Decorators.Meter.TicksMeter.GetElapsedTicks``3(System.Func{``0,``1,``2},``0,``1,``2@)">
            <summary>
            Get the method's execution time in elapsed ticks
            </summary>
            <param name="method">Delegate to the method to invoke</param>
            <param name="first">The first method's parameter</param>
            <param name="second">The second method's parameter</param>
            <param name="methodsOut">The method's return value</param>
            <typeparam name="T1In">The first method's parameter type</typeparam>
            <typeparam name="T2In">The second method's parameter type</typeparam>
            <typeparam name="TOut">The method's return value type</typeparam>
            <returns>Method's execution time in elapsed ticks</returns>
            <exception cref="T:System.ArgumentNullException">The delegate is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileCabinetFilesystemService.CreateRecord">
            <summary>
            Create a new record from user's input id
            </summary>
            <returns>Created record's id</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileCabinetFilesystemService.CreateRecord(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Create new record in base file with source parameters
            </summary>
            <param name="record">Source parameters to add</param>
            <returns>Id of created record</returns>
            <exception cref="T:System.ArgumentNullException">Parameters are null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileCabinetFilesystemService.GetRecords">
            <summary>
            Read all records from base file convert to <see cref="T:FileCabinetApp.FileCabinetService.FileSystemService.FilesystemRecord"/> array
            </summary>
            <returns>Array of <see cref="T:FileCabinetApp.FileCabinetService.FileSystemService.FilesystemRecord"/></returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileCabinetFilesystemService.GetStat">
            <summary>
            Get count of records in base file
            </summary>
            <returns>The amount of all records in base file</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileCabinetFilesystemService.ReadParameters(System.Int32)">
            <summary>
            Read parameters from keyboard and parse it to <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/> object
            </summary>
            <param name="id">Source id of read parameter</param>
            <returns><see cref="T:FileCabinetApp.Export.FileCabinetServiceSnapshot"/> object equivalent for read parameters</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileCabinetFilesystemService.ReadInput``1(System.Func{System.String,FileCabinetApp.Results.ConversionResult{``0}})">
            <summary>
            Read data from keyboard, convert it by source converter and validate with source validator
            </summary>
            <typeparam name="T">Type of read data</typeparam>
            <param name="converter">Source converter</param>
            <returns>Correct input object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileCabinetFilesystemService.Restore(FileCabinetApp.Export.FileCabinetServiceSnapshot)">
            <summary>
            Update current records with snapshot. If record is exist it will be overwritten, else append to end
            </summary>
            <param name="snapshot">Source snapshot</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileCabinetFilesystemService.Delete(FileCabinetApp.FileCabinetService.SearchValue)">
            <summary>
            Delete all records satisfy the source value
            </summary>
            <param name="searchValue">Source value to search</param>
            <returns>Identifications of deleted records</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileCabinetFilesystemService.Purge">
            <summary>
            Delete all records marked as delete from current file by creating a new one 
            </summary>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileCabinetFilesystemService.Insert(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Insert the source record to service by it's id
            </summary>
            <param name="record">The source record to insert</param>
            <exception cref="T:System.ArgumentNullException">The source record is null</exception>
            <exception cref="T:System.ArgumentException">The record with id equals the source one is already exist</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileCabinetFilesystemService.Update(System.Collections.Generic.IList{FileCabinetApp.FileCabinetService.SearchValue},System.Collections.Generic.IList{FileCabinetApp.FileCabinetService.SearchValue})">
            <summary>
            Find all records suitable with source values
            </summary>
            <param name="values">The new values of records</param>
            <param name="where">An array of search values for which the record will be considered as suitable</param>
            <returns>Identifications of updated records</returns>
            <exception cref="T:System.ArgumentNullException">One of the source arguments is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileSystemReader.ReadAndMoveCursorBack">
            <summary>
            Read the record and move cursor to it's beginning
            </summary>
            <returns>Read <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/> record</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileSystemReader.ReadRecord">
            <summary>
            Read one record from base file consistently
            </summary>
            <returns>Read <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileSystemReader.Deserialize">
            <summary>
            Deserialize all content from source file into <see cref="T:FileCabinetApp.FileCabinetService.FileSystemService.FilesystemRecord"/> array
            </summary>
            <returns><see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/> array</returns>
            <exception cref="T:System.ArgumentNullException">stream is null</exception>
            <exception cref="T:System.ArgumentException">The file size does not correspond to the integer number of occurrences of the records</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FilesystemRecord.ToBytes(System.String,System.Int32)">
            <summary>
            Create <see cref="T:System.Byte"/> array from value with source capacity 
            </summary>
            <param name="value">Value to make array with</param>
            <param name="capacity">Source capacity</param>
            <returns> <see cref="T:System.Byte"/> array with length equals capacity </returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FilesystemRecord.Serialize(System.IO.FileStream)">
            <summary>
            Serialize current <see cref="T:FileCabinetApp.FileCabinetService.FileSystemService.FilesystemRecord"/> into source file
            </summary>
            <param name="stream">Source file stream</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FilesystemRecord.ToFileCabinetRecord">
            <summary>
            Cast current <see cref="T:FileCabinetApp.FileCabinetService.FileSystemService.FilesystemRecord"/> to <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/>
            </summary>
            <returns>Suitable <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FilesystemRecord.ToAscii(System.String)">
            <summary>
            Create new string consists only ASCII characters
            </summary>
            <param name="source">Source string</param>
            <returns>New string with ASCII characters</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileSystemServiceDictionaries.Add(FileCabinetApp.FileCabinetService.FileCabinetRecord,System.Int64)">
            <summary>
            Add the source record and it's position in base file to dictionaries 
            </summary>
            <param name="record">The source record</param>
            <param name="position">Record's position on database file</param>
            <exception cref="T:System.ArgumentNullException">Source record is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileSystemServiceDictionaries.Edit(FileCabinetApp.FileCabinetService.FileCabinetRecord,FileCabinetApp.FileCabinetService.FileCabinetRecord,System.Int64)">
            <summary>
            Edit the existing record with the new one
            </summary>
            <param name="from">The already existing record</param>
            <param name="to">The new record</param>
            <param name="position">New record's position in database file</param>
            <exception cref="T:System.ArgumentNullException">At least one of the source values is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileSystemServiceDictionaries.Clear">
            <summary>
            Clear all dictionaries
            </summary>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileSystemServiceDictionaries.GetPositionsByValue(FileCabinetApp.FileCabinetService.SearchValue)">
            <summary>
            Return all the record's satisfy source value
            </summary>
            <param name="searchValue">Source value to search</param>
            <returns><see cref="T:System.Collections.Generic.HashSet`1"/> of records positions in database file</returns>
            <exception cref="T:System.ArgumentNullException">The search value is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The attribute is out from the existing ones</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileSystemServiceDictionaries.Find(FileCabinetApp.FileCabinetService.SearchValue)">
            <summary>
            Find all records satisfy the source value
            </summary>
            <param name="value">Source value to search</param>
            <returns>An array of records satisfy the source value</returns>
            <exception cref="T:System.ArgumentNullException">The search value is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The attribute is out from the existing ones</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileSystemServiceDictionaries.RemoveFromDictionaries(FileCabinetApp.FileCabinetService.FileCabinetRecord,System.Int64)">
            <summary>
            Remove the source record and it's position in file from all dictionaries
            </summary>
            <param name="record">Source record to remove</param>
            <param name="position">Record's position in database file</param>
            <exception cref="T:System.ArgumentNullException">At least one the source values is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileSystemServiceDictionaries.AddToDictionaries(FileCabinetApp.FileCabinetService.FileCabinetRecord,System.Int64)">
            <summary>
            Add the source record and it's position in file to all dictionaries
            </summary>
            <param name="record">Source record to remove</param>
            <param name="position">Record's position in database file</param>
            <exception cref="T:System.ArgumentNullException">At least one the source values is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileSystemServiceDictionaries.AddToDictionary``1(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.HashSet{System.Int64}},``0,System.Int64)">
            <summary>
            Add the source record and it's position in file to source dictionary
            </summary>
            <param name="dictionary">The dictionary to add</param>
            <param name="position">Record's position in database file</param>
            <exception cref="T:System.ArgumentNullException">At least one the source values is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileSystemWriter.AppendRange(System.Collections.Generic.IList{FileCabinetApp.FileCabinetService.FileCabinetRecord})">
            <summary>
            Add records to the end of data base
            </summary>
            <param name="records">Records to append</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileSystemWriter.RewriteWithAny(FileCabinetApp.FileCabinetService.FileCabinetRecord,System.Collections.Generic.ICollection{FileCabinetApp.FileCabinetService.FileCabinetRecord})">
            <summary>
            Overwrite the existing record by any one from records. After overwriting record is removed from array.
            </summary>
            <param name="read">Read from database record</param>
            <param name="records">Source records</param>
            <exception cref="T:System.ArgumentNullException">Record or records array are empty</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileSystemWriter.MarkAsDeleted(System.Int32)">
            <summary>
            Mark record with source id as deleted
            </summary>
            <param name="id">Source record's id</param>
            <exception cref="T:System.ArgumentException">Record is already marked as deleted. The flag's value is wrong initially</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.FileSystemWriter.Write(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Write the record to data base
            </summary>
            <param name="record">Record to write</param>
            <exception cref="T:System.ArgumentNullException">Record is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.RecordHelper.EditByAttribute(FileCabinetApp.FileCabinetService.FileCabinetRecord,FileCabinetApp.FileCabinetService.SearchValue)">
            <summary>
            Edit the record with source <see cref="T:FileCabinetApp.FileCabinetService.SearchValue"/>
            </summary>
            <param name="record">The record to edit</param>
            <param name="attribute">The object contains the attribute to edit and it's value</param>
            <returns>Edited record</returns>
            <exception cref="T:System.ArgumentNullException">At least one of the source values is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.RecordHelper.Contains(FileCabinetApp.FileCabinetService.FileCabinetRecord,FileCabinetApp.FileCabinetService.SearchValue)">
            <summary>
            Determine whether the source record has the attribute equals to the search value
            </summary>
            <param name="record">The source record</param>
            <param name="value">The object contains the attribute and it's value</param>
            <returns>True if contains</returns>
            <exception cref="T:System.ArgumentNullException">At least one of the source values is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The attribute is out of the existing ones</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.RecordHelper.Clone(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Create new record equals to the source one
            </summary>
            <param name="source">The source record</param>
            <returns>The new <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/></returns>
            <exception cref="T:System.ArgumentNullException">The source record is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.FileSystemService.RecordHelper.GetByAttribute(FileCabinetApp.FileCabinetService.FileCabinetRecord,FileCabinetApp.FileCabinetService.SearchValue.SearchProperty)">
            <summary>
            Extract the suitable attribute from the source record according to attribute
            </summary>
            <param name="record">The source record</param>
            <param name="attribute">Attribute to extract</param>
            <returns><see cref="T:System.String"/> representation record's attribute value </returns>
            <exception cref="T:System.ArgumentNullException">At least one of the source values is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The attribute is out of the existing ones</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.InputConverter.IdConverter(System.String)">
            <summary>
            Convert source id to its <see cref="T:System.Int32"/> representation
            </summary>
            <param name="id">Source id</param>
            <returns>Parsed <see cref="T:System.Int32"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.InputConverter.NameConverter(System.String)">
            <summary>
            Convert source string to its string representation
            </summary>
            <param name="source">Source name either first or last</param>
            <returns>Parsed <see cref="T:System.String"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.InputConverter.DateOfBirthConverter(System.String)">
            <summary>
            Converts source date of birth representation into it`s <see cref="T:System.DateTime"/> equivalent 
            </summary>
            <param name="dateOfBirth">Source date of birth</param>
            <returns>Parsed <see cref="T:System.DateTime"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.InputConverter.JobExperienceConverter(System.String)">
            <summary>
            Converts source job experience representation into it`s <see cref="T:System.Int16"/> equivalent 
            </summary>
            <param name="jobExperience">Source job experience</param>
            <returns>Parsed <see cref="T:System.Int16"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.InputConverter.SalaryConverter(System.String)">
            <summary>
            Converts source wage representation into it`s <see cref="T:System.Decimal"/> equivalent 
            </summary>
            <param name="wage">Source wage</param>
            <returns>Parsed <see cref="T:System.Decimal"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.InputConverter.RankConverter(System.String)">
            <summary>
            Converts source rank representation into it`s <see cref="T:System.Char"/> equivalent
            </summary>
            <param name="rank">Source rank</param>
            <returns>Parsed <see cref="T:System.Char"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.MemoryService.FileCabinetMemoryService.CreateRecord">
            <summary>
            Create a new record from user's input id
            </summary>
            <returns>Created record's id</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.MemoryService.FileCabinetMemoryService.CreateRecord(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            The method create new record from source record and return its id
            </summary>
            <returns>An id of current record</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.MemoryService.FileCabinetMemoryService.GetRecords">
            <summary>
            Read all the records from current service
            </summary>
            <returns>An array of <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/></returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.MemoryService.FileCabinetMemoryService.GetStat">
            <summary>
            Returns number of records that the service stores
            </summary>
            <value>An ordinal number of the last record</value>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.MemoryService.FileCabinetMemoryService.ReadParameters(System.Int32)">
            <summary>
            Read parameters from keyboard and parse it to <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/> object
            </summary>
            <param name="id">Source id of read parameter</param>
            <returns><see cref="T:FileCabinetApp.Export.FileCabinetServiceSnapshot"/> object equivalent for read parameters</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.MemoryService.FileCabinetMemoryService.ReadInput``1(System.Func{System.String,FileCabinetApp.Results.ConversionResult{``0}})">
            <summary>
            Read data from keyboard, convert it by source converter and validate with source validator
            </summary>
            <typeparam name="T">Type of read data</typeparam>
            <param name="converter">Source converter</param>
            <returns>Correct input object</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.MemoryService.FileCabinetMemoryService.Restore(FileCabinetApp.Export.FileCabinetServiceSnapshot)">
            <summary>
            Add the records from snapshot to current service. Records from snapshot that are already exist will be
            edited. The others will be added
            </summary>
            <param name="snapshot">Source snapshot</param>
            <exception cref="T:System.ArgumentNullException">The source snapshot is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.MemoryService.FileCabinetMemoryService.Delete(FileCabinetApp.FileCabinetService.SearchValue)">
            <summary>
            Delete all records satisfy the source value
            </summary>
            <param name="searchValue">Source value to search</param>
            <returns>Identifications of deleted records</returns>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.MemoryService.FileCabinetMemoryService.Insert(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Insert the source record to service by it's id
            </summary>
            <param name="record">The source record to insert</param>
            <exception cref="T:System.ArgumentNullException">The source record is null</exception>
            <exception cref="T:System.ArgumentException">The record with id equals the source one is already exist</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.MemoryService.FileCabinetMemoryService.Update(System.Collections.Generic.IList{FileCabinetApp.FileCabinetService.SearchValue},System.Collections.Generic.IList{FileCabinetApp.FileCabinetService.SearchValue})">
            <summary>
            Find all records suitable records with source values
            </summary>
            <param name="values">The new values of records</param>
            <param name="where">An array of search values for which the record will be considered as suitable</param>
            <returns>Identifications of updated records</returns>
            <exception cref="T:System.ArgumentNullException">One of the source arguments is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.MemoryService.FileCabinetMemoryService.RemoveMismatch(System.Collections.Generic.IList{FileCabinetApp.FileCabinetService.FileCabinetRecord},System.Collections.Generic.IList{FileCabinetApp.FileCabinetService.SearchValue})">
            <summary>
            Delete records from source array that not satisfy match
            </summary>
            <param name="source">Source records</param>
            <param name="match">Source values to remove</param>
            <exception cref="T:System.ArgumentNullException">At least on of the source values is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.MemoryService.MemoryServiceDictionaries.Add(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Append record to all dictionaries
            </summary>
            <param name="record">Source record</param>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.MemoryService.MemoryServiceDictionaries.Remove(FileCabinetApp.FileCabinetService.SearchValue)">
            <summary>
            Remove all records satisfy source value
            </summary>
            <param name="searchValue">Source value to search</param>
            <returns>Identifications of deleted records</returns>
            <exception cref="T:System.ArgumentNullException">The search value is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.MemoryService.MemoryServiceDictionaries.Find(FileCabinetApp.FileCabinetService.SearchValue)">
            <summary>
            Find all records satisfy the source value
            </summary>
            <param name="value">Source value to search</param>
            <returns>An array of records satisfy the source value</returns>
            <exception cref="T:System.ArgumentNullException">The search value is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.MemoryService.MemoryServiceDictionaries.Edit(FileCabinetApp.FileCabinetService.FileCabinetRecord,FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Edit the existing record with the new one
            </summary>
            <param name="from">The already existing record</param>
            <param name="to">The new record</param>
            <exception cref="T:System.ArgumentNullException">At least one of the source values is null</exception>
        </member>
        <member name="M:FileCabinetApp.FileCabinetService.MemoryService.MemoryServiceDictionaries.Remove(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Remove source record from dictionary
            </summary>
            <param name="record">Source record</param>
        </member>
        <member name="M:FileCabinetApp.Handlers.CreateCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Create record in current service. If default service is selected, parameters from the custom one
            are not requested
            </summary>
            <param name="request">Object contains command and it's parameters</param>
            <exception cref="T:System.ArgumentNullException">Request in null</exception>
        </member>
        <member name="M:FileCabinetApp.Handlers.DeleteCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Remove record from current service. If service storage is file, it marks the record as deleted
            </summary>
            <param name="request">Object contains command and it's parameters</param>
            <exception cref="T:System.ArgumentNullException">Request in null</exception>
            <example>
            delete where id='1'
            delete where rank = 'A'
            </example>
        </member>
        <member name="M:FileCabinetApp.Handlers.DeleteCommandHandler.GetSearchAttribute(System.String)">
            <summary>
            Extract <see cref="T:FileCabinetApp.FileCabinetService.SearchValue"/> from source parameters
            </summary>
            <param name="parameters">Source parameters</param>
            <returns><see cref="T:FileCabinetApp.FileCabinetService.SearchValue"/> extracted from source string</returns>
            <exception cref="T:System.ArgumentException">Cant find delimiter <see cref="F:FileCabinetApp.Handlers.DeleteCommandHandler.Keyword"/></exception>
        </member>
        <member name="M:FileCabinetApp.Handlers.ErrorCommandHandler.Handle(System.String)">
            <summary>
            Prints the most suitable existing command to the input one 
            </summary>
            <param name="command">Source command request</param>
            <exception cref="T:System.ArgumentNullException">Source request is null</exception>
        </member>
        <member name="M:FileCabinetApp.Handlers.ErrorCommandHandler.PrintWithMaxMatch(System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.String}},System.Int32)">
            <summary>
            Prints all items from source record where match equals searchMatch
            </summary>
            <param name="matches">Source array of matches</param>
            <param name="searchMatch">Match to search</param>
        </member>
        <member name="M:FileCabinetApp.Handlers.ErrorCommandHandler.IsPartOfCommand(System.String,System.String)">
            <summary>
            Determine if input command is a part of the source string
            </summary>
            <param name="source">Source string</param>
            <param name="command">Command to search</param>
            <returns>True if the input command is a part of the source</returns>
        </member>
        <member name="M:FileCabinetApp.Handlers.ErrorCommandHandler.GetStartWith(System.String,System.String)">
            <summary>
            Counts the number of identical characters of command from the beginning of source 
            </summary>
            <param name="source">Source string</param>
            <param name="command">Source command</param>
            <returns>Total number of matches</returns>
        </member>
        <member name="M:FileCabinetApp.Handlers.ExitCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Exit from application
            </summary>
            <param name="request">Object contains command and it's parameters</param>
        </member>
        <member name="M:FileCabinetApp.Handlers.ExportCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Serialize all records in file with entered format
            </summary>
            <param name="request">Object contains command and it's parameters</param>
            <exception cref="T:System.ArgumentNullException">Request in null</exception>
        </member>
        <member name="M:FileCabinetApp.Handlers.ExportCommandHandler.Export(System.String,System.Nullable{FileCabinetApp.Handlers.Helpers.ExportFormat})">
            <summary>
            Export all records from current service in file with the input path and input format. If file is not exist
            it will be created
            </summary>
            <param name="path">Absolute path to the export file</param>
            <param name="format">Format of the export file</param>
            <exception cref="T:System.ArgumentNullException">Export format is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Export format is not supported</exception>
            <example>
            export xml records.xml
            export csv /usr/src/records.csv
            </example>
        </member>
        <member name="M:FileCabinetApp.Handlers.ExportCommandHandler.DirectoryIsAllowed(System.String)">
            <summary>
            Determine whether the directory is allowed, file of source directory is exist and if it is
            request permission to rewrite
            </summary>
            <param name="sourceDirectory">Source directory</param>
            <returns>True if file is not exist or rewrite is allowed</returns>
        </member>
        <member name="M:FileCabinetApp.Handlers.ExportCommandHandler.AllowRewriteIfExist">
            <summary>
            Get the permission to rewrite the file
            </summary>
            <returns>True of allowed</returns>
        </member>
        <member name="M:FileCabinetApp.Handlers.ExportCommandHandler.GetExportFormat(System.String)">
            <summary>
            Parse string representation of <see cref="T:FileCabinetApp.Handlers.Helpers.ExportFormat"/>
            </summary>
            <param name="parameters">Source string to parse</param>
            <returns>Parsed <see cref="T:FileCabinetApp.Handlers.Helpers.ExportFormat"/></returns>
        </member>
        <member name="M:FileCabinetApp.Handlers.HelpCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Prints help message
            </summary>
            <param name="request">Object contains command and it's parameters</param>
            <exception cref="T:System.ArgumentNullException">Request in null</exception>
        </member>
        <member name="M:FileCabinetApp.Handlers.Helpers.DefaultLineExtractor.ExtractSearchValues(System.String,System.String)">
            <summary>
            Create <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:FileCabinetApp.FileCabinetService.SearchValue"/> from source string with values enumerated by source delimiter
            </summary>
            <param name="source">source string</param>
            <param name="delimiter">source delimiter</param>
            <returns><see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:FileCabinetApp.FileCabinetService.SearchValue"/></returns>
            <exception cref="T:System.ArgumentNullException">Source string is null or empty</exception>
        </member>
        <member name="M:FileCabinetApp.Handlers.Helpers.InsertLineExtractor.ExtractValues(System.String)">
            <summary>
            Extract search values from source parameters
            </summary>
            <param name="parameters">Source string to extract from</param>
            <returns>An array of <see cref="T:FileCabinetApp.FileCabinetService.SearchValue"/></returns>
            <exception cref="T:System.ArgumentNullException">Source string is null</exception>
            <exception cref="T:System.ArgumentException">Cannot find values keyword</exception>
            <exception cref="T:System.ArgumentException">Number of keys doesnt correspond to number of values</exception>
        </member>
        <member name="M:FileCabinetApp.Handlers.Helpers.InsertLineExtractor.CreateInsertValues(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Create <see cref="T:FileCabinetApp.FileCabinetService.SearchValue"/> from source keys and values. The number of them must be equal
            </summary>
            <param name="keys">Source keys representing record properties</param>
            <param name="values">The values that the properties will be filled with</param>
            <returns>An array of <see cref="T:FileCabinetApp.FileCabinetService.SearchValue"/></returns>
        </member>
        <member name="M:FileCabinetApp.Handlers.Helpers.InsertLineExtractor.GetKeys(System.String)">
            <summary>
            Get keys from source string
            </summary>
            <param name="source">Source string</param>
            <returns>An array of keys</returns>
            <exception cref="T:System.ArgumentException">Parameter values should be enclosed in brackets</exception>
        </member>
        <member name="M:FileCabinetApp.Handlers.ImportCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Import records from source file
            </summary>
            <param name="request">Object contains command and it's parameters</param>
            <exception cref="T:System.ArgumentNullException">Request in null</exception>
            <example>
            import xml records.xml
            export csv /usr/src/records.csv
            </example>
        </member>
        <member name="M:FileCabinetApp.Handlers.ImportCommandHandler.Import(System.String,System.Nullable{FileCabinetApp.Handlers.Helpers.ExportFormat})">
            <summary>
            Import records from file with source directory and format
            </summary>
            <param name="directory">Absolute path to the file</param>
            <param name="format">File's extension</param>
            <returns><see cref="T:FileCabinetApp.Export.FileCabinetServiceSnapshot"/> created by import records</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The format of import file is not supported</exception>
            <exception cref="T:System.InvalidOperationException">An error occurred during deserialization</exception>
            <exception cref="T:System.ArgumentException">Some record's value cannot be parsed or not satisfy validation-rules</exception>
        </member>
        <member name="M:FileCabinetApp.Handlers.ImportCommandHandler.TryGetExportFormat(System.String,System.Nullable{FileCabinetApp.Handlers.Helpers.ExportFormat}@)">
            <summary>
            Try parse source string to <see cref="T:FileCabinetApp.Handlers.Helpers.ExportFormat"/>
            </summary>
            <param name="source">Source string</param>
            <param name="format">Output format</param>
            <returns>True is parsing was successful</returns>
        </member>
        <member name="M:FileCabinetApp.Handlers.ImportCommandHandler.TryGetDirectory(System.String)">
            <summary>
            Determine whether file with source directory is exist
            </summary>
            <param name="directory">Source directory</param>
            <returns>True if file is exist</returns>
        </member>
        <member name="M:FileCabinetApp.Handlers.ImportCommandHandler.DirectoryIsCorrect(System.String)">
            <summary>
            Determine whether file with source directory is exist
            </summary>
            <param name="directory">Source directory</param>
        </member>
        <member name="M:FileCabinetApp.Handlers.InsertCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Insert a new value to the current service. The value is inserted before the first record with a greater ID.
            The identificator, first name, last name and date of birth values are required because the are initial for
            any record. Number of the properties must be correspond with values. Quotes in values are optional
            </summary>
            <param name="request">Source command request</param>
            <exception cref="T:System.ArgumentNullException">Request is null</exception>
            <example>
            insert (id, firstname, lastname, dateofbirth) values ('1', 'John', 'Doe', '05/18/1986')
            insert (firstname, id, lastname, dateofbirth, rank) values (Ivan, 4, Ivanov, 13/05/2001, A)
            </example>
        </member>
        <member name="M:FileCabinetApp.Handlers.InsertCommandHandler.CreateRecordFromInsertValue(System.Collections.Generic.IEnumerable{FileCabinetApp.FileCabinetService.SearchValue})">
            <summary>
            Create a new <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/> and fill it with source values
            </summary>
            <param name="value">An array of values to fill</param>
            <returns><see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/> record</returns>
        </member>
        <member name="M:FileCabinetApp.Handlers.InsertCommandHandler.TryExtractValues(System.String,System.Collections.Generic.ICollection{FileCabinetApp.FileCabinetService.SearchValue}@)">
            <summary>
            Try extract 
            </summary>
            <param name="parameters">Source parameters line</param>
            <param name="values">Values to extract</param>
            <returns>True if extracting was successful</returns>
        </member>
        <member name="M:FileCabinetApp.Handlers.PurgeCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Remove all records marked as deleted from source database
            </summary>
            <param name="request">Source command request</param>
        </member>
        <member name="M:FileCabinetApp.Handlers.SelectCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Prints all suitable records by using current printer. By default printer uses <see cref="T:FileCabinetApp.Printers.Table.TablePrinter"/>.
            The search is case-sensitive
            </summary>
            <param name="request">Default command request</param>
            <exception cref="T:System.ArgumentNullException">Request is null</exception>
            <example>
            select ----> prints parameters and all records
            select firstname, lastname ----> prints only first names and last names
            select firstname, lastname where id = '1' ----> prints only first names and last names from records where id equals '1'
            select where firstname = 'Ivan' ----> prints all records where firstname equals 'Ivan'
            select where rank = 'A' and/or lastname = 'Ivanov' ----> prints all properties from records where rank equals 'A' AND/OR last name equals 'Ivan'
            </example>
        </member>
        <member name="M:FileCabinetApp.Handlers.SelectCommandHandler.SetTablePrinterProperties(System.String)">
            <summary>
            Create table printer by parsing parameters
            </summary>
            <param name="parameters">Command line parameters</param>
        </member>
        <member name="M:FileCabinetApp.Handlers.SelectCommandHandler.GetProperties(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Cast array of string properties to array of <see cref="T:FileCabinetApp.FileCabinetService.SearchValue.SearchProperty"/>
            </summary>
            <param name="keys">Array of string representation of properties</param>
            <returns>Source array parsed to <see cref="T:FileCabinetApp.FileCabinetService.SearchValue.SearchProperty"/></returns>
        </member>
        <member name="M:FileCabinetApp.Handlers.SelectCommandHandler.FindDelimiter(System.String,System.Collections.Generic.IReadOnlyCollection{FileCabinetApp.Printers.Table.LogicalOperand})">
            <summary>
            Determine whether the source string contains any from delimiters
            </summary>
            <param name="source">source string</param>
            <param name="delimiters">Array of delimiters to search</param>
            <returns>Index of find delimiter</returns>
        </member>
        <member name="M:FileCabinetApp.Handlers.StatCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Prints the amount of existing and deleted records
            </summary>
            <param name="request">Source command request</param>
            <exception cref="T:System.ArgumentNullException">Source request is null</exception>
        </member>
        <member name="M:FileCabinetApp.Handlers.UpdateCommandHandler.Handle(FileCabinetApp.Handlers.AppCommandRequest)">
            <summary>
            Update suitable records with input values
            </summary>
            <param name="request">Source command request</param>
            <exception cref="T:System.ArgumentNullException">Source request is null</exception>
            <example>
            update set firstname = 'John', lastname = 'Doe' , dateofbirth = '5/18/1986' where id = '1'
            update set DateOfBirth='05/18/1986' where FirstName = 'Stan' and LastName='Smith'
            </example>
        </member>
        <member name="M:FileCabinetApp.Import.FIleCabinetCsvReader.ReadAll">
            <summary>
            Read all records from current base file written in csv
            </summary>
            <returns><see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/></returns>
        </member>
        <member name="M:FileCabinetApp.Import.FIleCabinetCsvReader.TryDeserializeFromCsvLine(System.String,System.Int32@,FileCabinetApp.FileCabinetService.FileCabinetRecord@)">
            <summary>
            Deserialize <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/> from source line
            </summary>
            <param name="csvLine">Source line in csv format</param>
            <returns>True if import is successful</returns>
        </member>
        <member name="M:FileCabinetApp.Import.FIleCabinetCsvReader.DeserializeFromCsvLine(System.String,System.Char)">
            <summary>
            Deserialize <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/> from source line
            </summary>
            <param name="csvLine">Source line in csv format</param>
            <returns><see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/> object</returns>
            <exception cref="T:System.ArgumentException">The amount of parameters in line doesn't correspond
            to <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/></exception>
        </member>
        <member name="M:FileCabinetApp.Import.FIleCabinetCsvReader.Parse``1(System.String,System.Func{System.String,FileCabinetApp.Results.ConversionResult{``0}})">
            <summary>
            Parse source string to suitable <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/> parameter applying certain rules
            to convert and validate
            </summary>
            <param name="source">Source string to parse</param>
            <param name="converter">Source converter with convert methods</param>
            <typeparam name="T">The output parsing type</typeparam>
            <returns>Object parsed to output type and satisfied validator's methods</returns>
            <exception cref="T:System.ArgumentException">Cannot convert the source value
            or it's doesnt satisfy validation rules </exception>
        </member>
        <member name="M:FileCabinetApp.Import.FileCabinetXmlReader.ReadAll">
            <summary>
            Read all records from current base file written in xml
            </summary>
            <returns><see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/></returns>
        </member>
        <member name="M:FileCabinetApp.Import.FileCabinetXmlReader.ToFileCabinetRecord(FileCabinetApp.Export.RecordXml)">
            <summary>
            Parse <see cref="T:FileCabinetApp.Export.RecordXml"/> record to <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/>
            </summary>
            <param name="record">Source record</param>
            <returns>Suitable <see cref="T:FileCabinetApp.FileCabinetService.FileCabinetRecord"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.Printers.Table.RecordsTable.Add(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Add source record to table
            </summary>
            <param name="record">Source record</param>
        </member>
        <member name="M:FileCabinetApp.Printers.Table.RecordsTable.ToString">
            <summary>
            Represents the table as a string
            </summary>
            <returns><see cref="T:System.String"/> representation of current table</returns>
        </member>
        <member name="M:FileCabinetApp.Printers.Table.RecordsTable.GetHeader">
            <summary>
            Create a header consists of the names of columns
            </summary>
            <returns><see cref="T:System.String"/> representation of header</returns>
        </member>
        <member name="M:FileCabinetApp.Printers.Table.RecordsTable.GetValueInFormat(System.String,System.Int32,FileCabinetApp.Printers.Table.Alignment)">
            <summary>
            Create a cell with a given value, expands it with width and orients by alignment
            </summary>
            <param name="value">Value to place</param>
            <param name="maxWidth">The width of the cell</param>
            <param name="alignment">Value alignment</param>
            <returns><see cref="T:System.String"/> representation of the created cell</returns>
        </member>
        <member name="M:FileCabinetApp.Printers.Table.RecordsTable.SetSeparatedLine">
            <summary>
            Set the separated line
            </summary>
        </member>
        <member name="M:FileCabinetApp.Printers.Table.RecordsTable.GetSeparatedLine(System.Int32)">
            <summary>
            Creates a section of the separate line with the specified length meaning the length of the intended value
            </summary>
            <param name="length">The estimated length of the inserted value.
            Additionally, the left and right are supplemented with one space</param>
            <returns>Return the <see cref="T:System.String"/> section of a separate line</returns>
        </member>
        <member name="M:FileCabinetApp.Printers.Table.TablePrinter.Print(System.Collections.Generic.IEnumerable{FileCabinetApp.FileCabinetService.FileCabinetRecord})">
            <summary>
            Find the suitable records from source array and print them in table. If properties to search wasn't not specified it prints
            all the properties of record. If 'where' wasn't not specified it prints all records from source array
            </summary>
            <param name="records">Source record</param>
            <exception cref="T:System.ArgumentNullException">Records array is null</exception>
        </member>
        <member name="M:FileCabinetApp.Printers.Table.TablePrinter.SatisfyAll(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Determine whether the source record properties are equals to current ones
            </summary>
            <param name="record">Source record</param>
            <returns>False if it's not equals to any</returns>
        </member>
        <member name="M:FileCabinetApp.Printers.Table.TablePrinter.SatisfyAny(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Determine whether the source record properties are equals to any from current ones
            </summary>
            <param name="record">Source record</param>
            <returns>True if it's equals to any</returns>
        </member>
        <member name="M:FileCabinetApp.Program.TryCreateCommandHandlers(FileCabinetApp.FileCabinetService.IFileCabinetService,FileCabinetApp.Handlers.ICommandHandler@)">
            <summary>
            Try <see cref="M:FileCabinetApp.Program.CreateCommandHandlers(FileCabinetApp.FileCabinetService.IFileCabinetService)"/>
            </summary>
            <param name="service">Current service</param>
            <param name="handler">The first element from created chain of handlers</param>
            <returns>True if handlers were created successfully</returns>
        </member>
        <member name="M:FileCabinetApp.Program.TryReadUsersImport(FileCabinetApp.Handlers.AppCommandRequest@)">
            <summary>
            Try <see cref="M:FileCabinetApp.Program.ReadUsersImport"/>
            </summary>
            <param name="request">Parsed request</param>
            <returns>True if parsing was successful</returns>
        </member>
        <member name="M:FileCabinetApp.Program.ReadUsersImport">
            <summary>
            Get users command from keyboard, split it by whitespace and parse to <see cref="T:FileCabinetApp.Handlers.AppCommandRequest"/>
            </summary>
            <returns>parsed <see cref="T:FileCabinetApp.Handlers.AppCommandRequest"/> object</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Input command is not defined in current <see cref="T:FileCabinetApp.Handlers.RequestCommand"/></exception>
        </member>
        <member name="M:FileCabinetApp.Program.SetValidationRules(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parse command line arguments and create the suitable <see cref="T:FileCabinetApp.FileCabinetService.IFileCabinetService"/> and <see cref="T:FileCabinetApp.Validation.ValidationRules"/>
            </summary>
            <param name="args">Line arguments split by whitespace</param>
        </member>
        <member name="M:FileCabinetApp.Program.CreateCommandHandlers(FileCabinetApp.FileCabinetService.IFileCabinetService)">
            <summary>
            Create the chain of command handlers starts from <see cref="T:FileCabinetApp.Handlers.CreateCommandHandler"/>
            and ends by <see cref="T:FileCabinetApp.Handlers.UpdateCommandHandler"/>
            </summary>
            <param name="service">Current service</param>
            <returns>The command handlers chain</returns>
        </member>
        <member name="M:FileCabinetApp.Validation.CommandLineParser.SetValidationRule(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create <see cref="T:FileCabinetApp.FileCabinetService.IFileCabinetService"/> object according to entered command parameter
            </summary>
            <param name="args">Source command parameter</param>
            <exception cref="T:System.ArgumentException">Thrown when there is no such command parameter, or it is not exist.</exception>
        </member>
        <member name="M:FileCabinetApp.Validation.CommandLineParser.IsCustomService(System.String)">
            <summary>
            Determine whether the command line contains custom validation rules argument
            </summary>
            <param name="commandLine">Source command line</param>
            <returns>True when command line contains the custom validation rules argument either in full or short form</returns>
        </member>
        <member name="M:FileCabinetApp.Validation.CommandLineParser.IsFileSystemService(System.String)">
            <summary>
            Determine whether the command line contains filesystem service argument
            </summary>
            <param name="commandLine">Source command line</param>
            <returns>True when command line contains the filesystem service argument either in full or short form</returns>
        </member>
        <member name="M:FileCabinetApp.Validation.CommandLineParser.IsUseLogger(System.String)">
            <summary>
            Determine whether the command line contains logger argument
            </summary>
            <param name="commandLine">Source command line</param>
            <returns>True when command line contains the logger argument</returns>
        </member>
        <member name="M:FileCabinetApp.Validation.CommandLineParser.IsUseStopWatch(System.String)">
            <summary>
            Determine whether the command line contains stopwatch argument
            </summary>
            <param name="commandLine">Source command line</param>
            <returns>True when command line contains the stopwatch argument</returns>
        </member>
        <member name="M:FileCabinetApp.Validation.CommandLineParser.HasCommand(System.String,System.String)">
            <summary>
            Determine whether the command line contains source command
            </summary>
            <param name="commandLine">Command line</param>
            <param name="command">Source command</param>
            <returns>True when the command line contains source command</returns>
        </member>
        <member name="M:FileCabinetApp.Validation.ValidationRulesReader.ReadRules(System.String)">
            <summary>
            Read <see cref="T:FileCabinetApp.Validation.ValidationRules"/> from JSON file
            </summary>
            <param name="path">Absolute path to the file with rules</param>
            <returns><see cref="T:FileCabinetApp.Validation.ValidationRules"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.Validation.ValidationRulesReader.FillNullParameters(FileCabinetApp.Validation.ValidationRules)">
            <summary>
            Fill null criterias of the source validation rules with their default values
            </summary>
            <param name="source">Source validation rule</param>
            <returns>Filled <see cref="T:FileCabinetApp.Validation.ValidationRules"/> object</returns>
        </member>
        <member name="M:FileCabinetApp.Validation.ValidationRulesReader.FillNullDefaultParameters(FileCabinetApp.Validation.ValidationRules)">
            <summary>
            Fill null default criterias from source <see cref="T:FileCabinetApp.Validation.ValidationRules"/>
            </summary>
            <param name="source">Source rules</param>
        </member>
        <member name="M:FileCabinetApp.Validation.ValidationRulesReader.FillNullCustomParameters(FileCabinetApp.Validation.ValidationRules)">
            <summary>
            Fill null custom criterias from source <see cref="T:FileCabinetApp.Validation.ValidationRules"/>
            </summary>
            <param name="source">Source rules</param>
        </member>
        <member name="M:FileCabinetApp.Validators.CompositeValidator.Validate(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Validate the source record with all current validators
            </summary>
            <param name="record">Source record to validate</param>
        </member>
        <member name="M:FileCabinetApp.Validators.DateOfBirthValidator.Validate(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Validate current record's date of birth
            </summary>
            <param name="record">Source record to validate</param>
            <exception cref="T:System.ArgumentNullException">Date of birth is null or whitespace</exception>
            <exception cref="T:System.ArgumentException">Date of birth is not in dd/MM/yyyy format.
            Date of birth is not in range of current minimum and maximum value</exception>
        </member>
        <member name="M:FileCabinetApp.Validators.FirstNameValidator.Validate(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Validate current record's first name
            </summary>
            <param name="record">Source record to validate</param>
            <exception cref="T:System.ArgumentException">First name's length is not in range of current minimum and maximum value</exception>
        </member>
        <member name="M:FileCabinetApp.Validators.IdValidator.Validate(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Validate current record's id
            </summary>
            <param name="record">Source record to validate</param>
        </member>
        <member name="M:FileCabinetApp.Validators.JobExperienceValidator.Validate(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Validate current record's job experience
            <param name="record">Source record to validate</param>
            </summary>
            <exception cref="T:System.ArgumentException">Job experience is null.
            Job experience is not an integer or less than zero or greater than short.MaxValue.
            Job experience is not in range of current minimum and maximum value.</exception>
        </member>
        <member name="M:FileCabinetApp.Validators.LastNameValidator.Validate(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Validate current record's last name
            </summary>
            <param name="record">Source record to validate</param>
            <exception cref="T:System.ArgumentException">First name's length is not in range of current minimum and maximum value</exception>
        </member>
        <member name="M:FileCabinetApp.Validators.RankValidator.Validate(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Validate current record's rank
            </summary>
            <param name="record">Source record to validate</param>
            <exception cref="T:System.ArgumentNullException">Record is null</exception>
            <exception cref="T:System.ArgumentException">Record's rank is not defined in current rank system</exception>
        </member>
        <member name="M:FileCabinetApp.Validators.SalaryValidator.Validate(FileCabinetApp.FileCabinetService.FileCabinetRecord)">
            <summary>
            Validate current record's salary
            </summary>
            <exception cref="T:System.ArgumentException">Wage is null.
            Wage is not an integer or greater than decimal.MaxValue.
            Wage is less than zero or less than current minimal value</exception>
        </member>
        <member name="M:FileCabinetApp.Validators.ValidationBuilder.CreateDefault">
            <summary>
            Create <see cref="T:FileCabinetApp.Validators.CompositeValidator"/> corresponding to the default parameters
            </summary>
            <returns><see cref="T:FileCabinetApp.Validators.CompositeValidator"/> as <see cref="T:FileCabinetApp.Validators.IRecordValidator"/></returns>
        </member>
        <member name="M:FileCabinetApp.Validators.ValidationBuilder.CreateCustom">
            <summary>
            Create <see cref="T:FileCabinetApp.Validators.CompositeValidator"/> corresponding to the custom parameters
            </summary>
            <returns><see cref="T:FileCabinetApp.Validators.CompositeValidator"/> as <see cref="T:FileCabinetApp.Validators.IRecordValidator"/></returns>
        </member>
    </members>
</doc>
